{
  "master:types/mathjs/index.d.ts": "// Type definitions for mathjs 9.3\n// Project: https://mathjs.org/\n// Definitions by: Ilya Shestakov <https://github.com/siavol>,\n//                  Andy Patterson <https://github.com/andnp>,\n//                  Brad Besserman <https://github.com/bradbesserman>,\n//                  Pawel Krol <https://github.com/pawkrol>,\n//                  Charlee Li <https://github.com/charlee>,\n//                  Mark Wiemer <https://github.com/mark-wiemer>\n//                  Opportunity Liu <https://github.com/OpportunityLiu>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n// TypeScript Version: 2.2\n\nimport { Decimal } from \"decimal.js\";\n\ndeclare const math: math.MathJsStatic;\nexport as namespace math;\nexport = math;\n\ntype NoLiteralType<T> = T extends number ? number : T extends string ? string : T extends boolean ? boolean : T;\ndeclare namespace math {\n    type MathArray = number[] | number[][];\n    type MathType = number | BigNumber | Fraction | Complex | Unit | MathArray | Matrix;\n    type MathExpression = string | string[] | MathArray | Matrix;\n\n    type FactoryFunction<T> = (scope: any) => T;\n\n    // FactoryFunctionMap can be nested; all nested objects will be flattened\n    interface FactoryFunctionMap {\n        [key: string]: FactoryFunction<any> | FactoryFunctionMap;\n    }\n\n    /** Available options for parse */\n    interface ParseOptions {\n        /** a set of custom nodes */\n        nodes?: Record<string, MathNode>;\n    }\n    /**\n     * Parse an expression. Returns a node tree, which can be evaluated by\n     * invoking node.evaluate().\n     *\n     * Note the evaluating arbitrary expressions may involve security risks,\n     * see [https://mathjs.org/docs/expressions/security.html](https://mathjs.org/docs/expressions/security.html) for more information.\n     *\n     * Syntax:\n     *\n     *     math.parse(expr)\n     *     math.parse(expr, options)\n     *     math.parse([expr1, expr2, expr3, ...])\n     *     math.parse([expr1, expr2, expr3, ...], options)\n     *\n     * Example:\n     *\n     *     const node1 = math.parse('sqrt(3^2 + 4^2)')\n     *     node1.compile().evaluate() // 5\n     *\n     *     let scope = {a:3, b:4}\n     *     const node2 = math.parse('a * b') // 12\n     *     const code2 = node2.compile()\n     *     code2.evaluate(scope) // 12\n     *     scope.a = 5\n     *     code2.evaluate(scope) // 20\n     *\n     *     const nodes = math.parse(['a = 3', 'b = 4', 'a * b'])\n     *     nodes[2].compile().evaluate() // 12\n     *\n     * See also:\n     *\n     *     evaluate, compile\n     */\n    interface ParseFunction {\n        /**\n         * Parse an expression. Returns a node tree, which can be evaluated by\n         * invoking node.evaluate();\n         *\n         * @param expr Expression to be parsed\n         * @param options Available options\n         * @returns A node\n         */\n        (expr: MathExpression, options?: ParseOptions): MathNode;\n\n        /**\n         * Parse an expression. Returns a node tree, which can be evaluated by\n         * invoking node.evaluate();\n         *\n         * @param exprs Expressions to be parsed\n         * @param options Available options\n         * @returns An array of nodes\n         */\n        (exprs: MathExpression[], options?: ParseOptions): MathNode[];\n\n        /**\n         * Checks whether the current character `c` is a valid alpha character:\n         *\n         * - A latin letter (upper or lower case) Ascii: a-z, A-Z\n         * - An underscore                        Ascii: _\n         * - A dollar sign                        Ascii: $\n         * - A latin letter with accents          Unicode: \\u00C0 - \\u02AF\n         * - A greek letter                       Unicode: \\u0370 - \\u03FF\n         * - A mathematical alphanumeric symbol   Unicode: \\u{1D400} - \\u{1D7FF} excluding invalid code points\n         *\n         * The previous and next characters are needed to determine whether\n         * this character is part of a unicode surrogate pair.\n         *\n         * @param c      Current character in the expression\n         * @param cPrev  Previous character\n         * @param cNext  Next character\n         */\n        isAlpha(c: string, cPrev: string, cNext: string): boolean;\n        /**\n         * Test whether a character is a valid latin, greek, or letter-like character\n         *\n         * @param c\n         */\n        isValidLatinOrGreek(c: string): boolean;\n        /**\n         * Test whether two given 16 bit characters form a surrogate pair of a\n         * unicode math symbol.\n         *\n         * https://unicode-table.com/en/\n         * https://www.wikiwand.com/en/Mathematical_operators_and_symbols_in_Unicode\n         *\n         * Note: In ES6 will be unicode aware:\n         * https://stackoverflow.com/questions/280712/javascript-unicode-regexes\n         * https://mathiasbynens.be/notes/es6-unicode-regex\n         *\n         * @param high\n         * @param low\n         */\n        isValidMathSymbol(high: string, low: string): boolean;\n        /**\n         * Check whether given character c is a white space character: space, tab, or enter\n         *\n         * @param c\n         * @param nestingLevel\n         */\n        isWhitespace(c: string, nestingLevel: number): boolean;\n        /**\n         * Test whether the character c is a decimal mark (dot).\n         * This is the case when it's not the start of a delimiter '.*', './', or '.^'\n         *\n         * @param  c\n         * @param  cNext\n         */\n        isDecimalMark(c: string, cNext: string): boolean;\n        /**\n         * checks if the given char c is a digit or dot\n         *\n         * @param  c   a string with one character\n         */\n        isDigitDot(c: string): boolean;\n        /**\n         * checks if the given char c is a digit\n         *\n         * @param  c   a string with one character\n         */\n        isDigit(c: string): boolean;\n        /**\n         * checks if the given char c is a hex digit\n         *\n         * @param c   a string with one character\n         */\n        isHexDigit(c: string): boolean;\n    }\n\n    type MathJsFunctionName = keyof MathJsStatic;\n\n    interface MathJsStatic extends FactoryDependencies {\n        e: number;\n        pi: number;\n        i: number;\n        Infinity: number;\n        LN2: number;\n        LN10: number;\n        LOG2E: number;\n        LOG10E: number;\n        NaN: number;\n        phi: number;\n        SQRT1_2: number;\n        SQRT2: number;\n        tau: number;\n\n        uninitialized: any;\n        version: string;\n\n        expression: MathNode;\n        json: MathJsJson;\n\n        /**\n         * If null were to be included in this interface, it would be\n         * auto-suggested as an import in VSCode. This causes issues because\n         * `null` is not a valid label.\n         *\n         * @see https://github.com/josdejong/mathjs/issues/2019\n         */\n        // null: number;\n\n        /*************************************************************************\n         * Core functions\n         ************************************************************************/\n\n        /**\n         * Set configuration options for math.js, and get current options. Will\n         * emit a ‘config’ event, with arguments (curr, prev, changes).\n         * @param options Available options: {number} epsilon Minimum relative\n         * difference between two compared values, used by all comparison\n         * functions. {string} matrix A string ‘Matrix’ (default) or ‘Array’.\n         * {string} number A string ‘number’ (default), ‘BigNumber’, or\n         * ‘Fraction’ {number} precision The number of significant digits for\n         * BigNumbers. Not applicable for Numbers. {string} parenthesis How to\n         * display parentheses in LaTeX and string output. {string} randomSeed\n         * Random seed for seeded pseudo random number generator. Set to null to\n         * randomly seed.\n         * @returns Returns the current configuration\n         */\n        config: (options: ConfigOptions) => ConfigOptions;\n        /**\n         * Create a typed-function which checks the types of the arguments and\n         * can match them against multiple provided signatures. The\n         * typed-function automatically converts inputs in order to find a\n         * matching signature. Typed functions throw informative errors in case\n         * of wrong input arguments.\n         * @param name Optional name for the typed-function\n         * @param signatures Object with one or multiple function signatures\n         * @returns The created typed-function.\n         */\n        typed: (name: string, signatures: Record<string, (...args: any[]) => any>) => (...args: any[]) => any;\n\n        /*************************************************************************\n         * Construction functions\n         ************************************************************************/\n\n        /**\n         * Create a BigNumber, which can store numbers with arbitrary precision.\n         * When a matrix is provided, all elements will be converted to\n         * BigNumber.\n         * @param x Value for the big number, 0 by default.\n         * @returns The created bignumber\n         */\n        bignumber(\n            x?: number | string | Fraction | BigNumber | MathArray | Matrix | boolean | Fraction | null,\n        ): BigNumber;\n\n        /**\n         * Create a boolean or convert a string or number to a boolean. In case\n         * of a number, true is returned for non-zero numbers, and false in case\n         * of zero. Strings can be 'true' or 'false', or can contain a number.\n         * When value is a matrix, all elements will be converted to boolean.\n         * @param x A value of any type\n         * @returns The boolean value\n         */\n        boolean(x: string | number | boolean | MathArray | Matrix | null): boolean | MathArray | Matrix;\n\n        /**\n         * Wrap any value in a chain, allowing to perform chained operations on\n         * the value. All methods available in the math.js library can be called\n         * upon the chain, and then will be evaluated with the value itself as\n         * first argument. The chain can be closed by executing chain.done(),\n         * which returns the final value. The chain has a number of spec",
  "c13f5d7c969561db0ac38464086406b6554e711c:types/mathjs/index.d.ts": "// Type definitions for mathjs 9.3\n// Project: https://mathjs.org/\n// Definitions by: Ilya Shestakov <https://github.com/siavol>,\n//                  Andy Patterson <https://github.com/andnp>,\n//                  Brad Besserman <https://github.com/bradbesserman>,\n//                  Pawel Krol <https://github.com/pawkrol>,\n//                  Charlee Li <https://github.com/charlee>,\n//                  Mark Wiemer <https://github.com/mark-wiemer>\n//                  Opportunity Liu <https://github.com/OpportunityLiu>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n// TypeScript Version: 2.2\n\nimport { Decimal } from \"decimal.js\";\n\ndeclare const math: math.MathJsStatic;\nexport as namespace math;\nexport = math;\n\ntype NoLiteralType<T> = T extends number ? number : T extends string ? string : T extends boolean ? boolean : T;\ndeclare namespace math {\n    type MathArray = number[] | number[][];\n    type MathType = number | BigNumber | Fraction | Complex | Unit | MathArray | Matrix;\n    type MathExpression = string | string[] | MathArray | Matrix;\n\n    type FactoryFunction<T> = (scope: any) => T;\n\n    // FactoryFunctionMap can be nested; all nested objects will be flattened\n    interface FactoryFunctionMap {\n        [key: string]: FactoryFunction<any> | FactoryFunctionMap;\n    }\n\n    /** Available options for parse */\n    interface ParseOptions {\n        /** a set of custom nodes */\n        nodes?: Record<string, MathNode>;\n    }\n    /**\n     * Parse an expression. Returns a node tree, which can be evaluated by\n     * invoking node.evaluate().\n     *\n     * Note the evaluating arbitrary expressions may involve security risks,\n     * see [https://mathjs.org/docs/expressions/security.html](https://mathjs.org/docs/expressions/security.html) for more information.\n     *\n     * Syntax:\n     *\n     *     math.parse(expr)\n     *     math.parse(expr, options)\n     *     math.parse([expr1, expr2, expr3, ...])\n     *     math.parse([expr1, expr2, expr3, ...], options)\n     *\n     * Example:\n     *\n     *     const node1 = math.parse('sqrt(3^2 + 4^2)')\n     *     node1.compile().evaluate() // 5\n     *\n     *     let scope = {a:3, b:4}\n     *     const node2 = math.parse('a * b') // 12\n     *     const code2 = node2.compile()\n     *     code2.evaluate(scope) // 12\n     *     scope.a = 5\n     *     code2.evaluate(scope) // 20\n     *\n     *     const nodes = math.parse(['a = 3', 'b = 4', 'a * b'])\n     *     nodes[2].compile().evaluate() // 12\n     *\n     * See also:\n     *\n     *     evaluate, compile\n     */\n    interface ParseFunction {\n        /**\n         * Parse an expression. Returns a node tree, which can be evaluated by\n         * invoking node.evaluate();\n         *\n         * @param expr Expression to be parsed\n         * @param options Available options\n         * @returns A node\n         */\n        (expr: MathExpression, options?: ParseOptions): MathNode;\n\n        /**\n         * Parse an expression. Returns a node tree, which can be evaluated by\n         * invoking node.evaluate();\n         *\n         * @param exprs Expressions to be parsed\n         * @param options Available options\n         * @returns An array of nodes\n         */\n        (exprs: MathExpression[], options?: ParseOptions): MathNode[];\n\n        /**\n         * Checks whether the current character `c` is a valid alpha character:\n         *\n         * - A latin letter (upper or lower case) Ascii: a-z, A-Z\n         * - An underscore                        Ascii: _\n         * - A dollar sign                        Ascii: $\n         * - A latin letter with accents          Unicode: \\u00C0 - \\u02AF\n         * - A greek letter                       Unicode: \\u0370 - \\u03FF\n         * - A mathematical alphanumeric symbol   Unicode: \\u{1D400} - \\u{1D7FF} excluding invalid code points\n         *\n         * The previous and next characters are needed to determine whether\n         * this character is part of a unicode surrogate pair.\n         *\n         * @param c      Current character in the expression\n         * @param cPrev  Previous character\n         * @param cNext  Next character\n         */\n        isAlpha(c: string, cPrev: string, cNext: string): boolean;\n        /**\n         * Test whether a character is a valid latin, greek, or letter-like character\n         *\n         * @param c\n         */\n        isValidLatinOrGreek(c: string): boolean;\n        /**\n         * Test whether two given 16 bit characters form a surrogate pair of a\n         * unicode math symbol.\n         *\n         * https://unicode-table.com/en/\n         * https://www.wikiwand.com/en/Mathematical_operators_and_symbols_in_Unicode\n         *\n         * Note: In ES6 will be unicode aware:\n         * https://stackoverflow.com/questions/280712/javascript-unicode-regexes\n         * https://mathiasbynens.be/notes/es6-unicode-regex\n         *\n         * @param high\n         * @param low\n         */\n        isValidMathSymbol(high: string, low: string): boolean;\n        /**\n         * Check whether given character c is a white space character: space, tab, or enter\n         *\n         * @param c\n         * @param nestingLevel\n         */\n        isWhitespace(c: string, nestingLevel: number): boolean;\n        /**\n         * Test whether the character c is a decimal mark (dot).\n         * This is the case when it's not the start of a delimiter '.*', './', or '.^'\n         *\n         * @param  c\n         * @param  cNext\n         */\n        isDecimalMark(c: string, cNext: string): boolean;\n        /**\n         * checks if the given char c is a digit or dot\n         *\n         * @param  c   a string with one character\n         */\n        isDigitDot(c: string): boolean;\n        /**\n         * checks if the given char c is a digit\n         *\n         * @param  c   a string with one character\n         */\n        isDigit(c: string): boolean;\n        /**\n         * checks if the given char c is a hex digit\n         *\n         * @param c   a string with one character\n         */\n        isHexDigit(c: string): boolean;\n    }\n\n    type MathJsFunctionName = keyof MathJsStatic;\n\n    interface MathJsStatic extends FactoryDependencies {\n        e: number;\n        pi: number;\n        i: number;\n        Infinity: number;\n        LN2: number;\n        LN10: number;\n        LOG2E: number;\n        LOG10E: number;\n        NaN: number;\n        phi: number;\n        SQRT1_2: number;\n        SQRT2: number;\n        tau: number;\n\n        uninitialized: any;\n        version: string;\n\n        expression: MathNode;\n        json: MathJsJson;\n\n        /**\n         * If null were to be included in this interface, it would be\n         * auto-suggested as an import in VSCode. This causes issues because\n         * `null` is not a valid label.\n         *\n         * @see https://github.com/josdejong/mathjs/issues/2019\n         */\n        // null: number;\n\n        /*************************************************************************\n         * Core functions\n         ************************************************************************/\n\n        /**\n         * Set configuration options for math.js, and get current options. Will\n         * emit a ‘config’ event, with arguments (curr, prev, changes).\n         * @param options Available options: {number} epsilon Minimum relative\n         * difference between two compared values, used by all comparison\n         * functions. {string} matrix A string ‘Matrix’ (default) or ‘Array’.\n         * {string} number A string ‘number’ (default), ‘BigNumber’, or\n         * ‘Fraction’ {number} precision The number of significant digits for\n         * BigNumbers. Not applicable for Numbers. {string} parenthesis How to\n         * display parentheses in LaTeX and string output. {string} randomSeed\n         * Random seed for seeded pseudo random number generator. Set to null to\n         * randomly seed.\n         * @returns Returns the current configuration\n         */\n        config: (options: ConfigOptions) => ConfigOptions;\n        /**\n         * Create a typed-function which checks the types of the arguments and\n         * can match them against multiple provided signatures. The\n         * typed-function automatically converts inputs in order to find a\n         * matching signature. Typed functions throw informative errors in case\n         * of wrong input arguments.\n         * @param name Optional name for the typed-function\n         * @param signatures Object with one or multiple function signatures\n         * @returns The created typed-function.\n         */\n        typed: (name: string, signatures: Record<string, (...args: any[]) => any>) => (...args: any[]) => any;\n\n        /*************************************************************************\n         * Construction functions\n         ************************************************************************/\n\n        /**\n         * Create a BigNumber, which can store numbers with arbitrary precision.\n         * When a matrix is provided, all elements will be converted to\n         * BigNumber.\n         * @param x Value for the big number, 0 by default.\n         * @returns The created bignumber\n         */\n        bignumber(\n            x?: number | string | Fraction | BigNumber | MathArray | Matrix | boolean | Fraction | null,\n        ): BigNumber;\n\n        /**\n         * Create a boolean or convert a string or number to a boolean. In case\n         * of a number, true is returned for non-zero numbers, and false in case\n         * of zero. Strings can be 'true' or 'false', or can contain a number.\n         * When value is a matrix, all elements will be converted to boolean.\n         * @param x A value of any type\n         * @returns The boolean value\n         */\n        boolean(x: string | number | boolean | MathArray | Matrix | null): boolean | MathArray | Matrix;\n\n        /**\n         * Wrap any value in a chain, allowing to perform chained operations on\n         * the value. All methods available in the math.js library can be called\n         * upon the chain, and then will be evaluated with the value itself as\n         * first argument. The chain can be closed by executing chain.done(),\n         * which returns the final value. The chain has a number of spec"
}
