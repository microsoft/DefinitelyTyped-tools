{
  "master:types/intercom-client/index.d.ts": "// Type definitions for intercom-client 2.11\n// Project: https://github.com/intercom/intercom-node\n// Definitions by: Jinesh Shah <https://github.com/jineshshah36>\n//                 Josef Hornych <https://github.com/peping>\n//                 Mikhail Monchak <https://github.com/mikhail-monchak>\n//                 Chris Doe <https://github.com/cdoe>\n//                 Malith Wijenayake <https://github.com/malithrw>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n// TypeScript Version: 2.2\n/// <reference types=\"node\" />\n\nimport {\n    List as UserList,\n    User,\n    UserIdIdentifier,\n    UserEmailIdentifier,\n    UserIdentifier,\n    CreateUpdateUser,\n} from './User';\nimport { List as LeadList, Lead, LeadIdentifier } from './Lead';\nimport { Visitor, VisitorIdentifier } from './Visitor';\nimport { CompanyIdentifier, List as CompanyList, Company } from './Company';\nimport { TagIdentifier, List as TagList, Tag, TagOper } from './Tag';\nimport { List as EventList, Event, ListParam as EventListParam } from './Event';\nimport { CreateMessage, Message } from './Message';\nimport { Scroll } from './Scroll';\nimport { IntercomError } from './IntercomError';\n\nimport { IncomingMessage } from 'http';\nimport request = require('request');\n\nexport { IntercomError };\n\nexport interface IdentityVerificationOptions {\n    secretKey: string;\n    identifier: string;\n}\n\nexport const IdentityVerification: {\n    userHash(opts: IdentityVerificationOptions): string;\n};\n\nexport class Client {\n    constructor(auth: { token: string } | { appId: string; appApiKey: string });\n    constructor(username: string, password: string);\n\n    users: Users;\n    companies: Companies;\n    tags: Tags;\n    events: Events;\n    contacts: Leads;\n    leads: Leads;\n    visitors: Visitors;\n    messages: Messages;\n\n    /**\n     * client library also supports passing in `request` options\n     * Note that certain request options (such as `json`, and certain `headers` names cannot be overridden).\n     */\n    useRequestOpts(options?: request.CoreOptions): this;\n}\n\nexport class ApiResponse<T> extends IncomingMessage {\n    body: T;\n}\n\nexport type callback<T> = ((d: T) => void) | ((err: IntercomError, d: T) => void);\n\nexport class Users {\n    create(user: Partial<CreateUpdateUser>): Promise<ApiResponse<User>>;\n    create(user: Partial<CreateUpdateUser>, cb: callback<ApiResponse<User>>): void;\n\n    update(user: UserIdentifier & Partial<CreateUpdateUser>): Promise<ApiResponse<User>>;\n    update(user: UserIdentifier & Partial<CreateUpdateUser>, cb: callback<ApiResponse<User>>): void;\n\n    find(identifier: UserIdIdentifier): Promise<ApiResponse<User>>;\n    find(identifier: UserIdIdentifier, cb: callback<ApiResponse<User>>): void;\n    find(identifier: UserEmailIdentifier): Promise<ApiResponse<UserList>>;\n    find(identifier: UserEmailIdentifier, cb: callback<ApiResponse<UserList>>): void;\n    find(identifier: UserIdentifier): Promise<ApiResponse<User | UserList>>;\n    find(identifier: UserIdentifier, cb: callback<ApiResponse<User | UserList>>): void;\n\n    list(): Promise<ApiResponse<UserList>>;\n    list(cb: callback<ApiResponse<UserList>>): void;\n\n    listBy(params: { tag_id?: string; segment_id?: string }): Promise<ApiResponse<UserList>>;\n    listBy(params: { tag_id?: string; segment_id?: string }, cb: callback<ApiResponse<UserList>>): void;\n\n    scroll: Scroll<User>;\n\n    archive(identifier: UserIdentifier): Promise<ApiResponse<User>>;\n    archive(identifier: UserIdentifier, cb: callback<ApiResponse<User>>): void;\n\n    requestPermanentDeletion(id: string): Promise<{ id: number }>;\n    requestPermanentDeletion(id: string, cb: callback<{ id: number }>): void;\n\n    requestPermanentDeletionByParams(identifier: UserIdentifier): Promise<{ id: number }>;\n    requestPermanentDeletionByParams(identifier: UserIdentifier, cb: callback<{ id: number }>): void;\n}\n\nexport class Leads {\n    create(lead: Partial<Lead>): Promise<ApiResponse<Lead>>;\n    create(lead: Partial<Lead>, cb: callback<ApiResponse<Lead>>): void;\n\n    update(lead: UserIdentifier & Partial<Lead>): Promise<ApiResponse<Lead>>;\n    update(lead: UserIdentifier & Partial<Lead>, cb: callback<ApiResponse<Lead>>): void;\n\n    list(): Promise<ApiResponse<LeadList>>;\n    list(cb: callback<ApiResponse<LeadList>>): void;\n\n    listBy(params: { email?: string; tag_id?: string; segment_id?: string }): Promise<ApiResponse<LeadList>>;\n    listBy(params: { email?: string; tag_id?: string; segment_id?: string }, cb: callback<ApiResponse<LeadList>>): void;\n\n    find(identifier: LeadIdentifier): Promise<ApiResponse<Lead>>;\n    find(identifier: LeadIdentifier, cb: callback<ApiResponse<Lead>>): void;\n\n    delete(id: string): Promise<ApiResponse<Lead>>;\n    delete(id: string, cb: callback<ApiResponse<Lead>>): void;\n\n    convert(params: { contact: LeadIdentifier; user: UserIdentifier }): Promise<ApiResponse<Lead>>;\n    convert(params: { contact: LeadIdentifier; user: UserIdentifier }, cb: callback<ApiResponse<Lead>>): void;\n}\n\nexport class Visitors {\n    update(visitor: VisitorIdentifier & Partial<Visitor>): Promise<ApiResponse<Visitor>>;\n    update(visitor: VisitorIdentifier & Partial<Visitor>, cb: callback<ApiResponse<Visitor>>): void;\n\n    find(identifier: VisitorIdentifier): Promise<ApiResponse<Visitor>>;\n    find(identifier: VisitorIdentifier, cb: callback<ApiResponse<Visitor>>): void;\n\n    delete(id: string): Promise<ApiResponse<Visitor>>;\n    delete(id: string, cb: callback<ApiResponse<Visitor>>): void;\n\n    convert(params: { identifier: VisitorIdentifier; type: 'lead' }): Promise<ApiResponse<Lead>>;\n    convert(params: { identifier: VisitorIdentifier; type: 'user'; user: UserIdentifier }): Promise<ApiResponse<User>>;\n\n    convert(\n        params: {\n            identifier: VisitorIdentifier;\n            type: 'lead';\n        },\n        cb: callback<ApiResponse<Lead>>,\n    ): void;\n    convert(\n        params: {\n            identifier: VisitorIdentifier;\n            type: 'user';\n            user: UserIdentifier;\n        },\n        cb: callback<ApiResponse<User>>,\n    ): void;\n}\n\nexport class Companies {\n    create(company: CompanyIdentifier & Partial<Company>): Promise<ApiResponse<Company>>;\n    create(company: CompanyIdentifier & Partial<Company>, cb: callback<ApiResponse<Company>>): void;\n\n    update(company: CompanyIdentifier & Partial<Company>): Promise<ApiResponse<Company>>;\n    update(company: CompanyIdentifier & Partial<Company>, cb: callback<ApiResponse<Company>>): void;\n\n    find(identifier: CompanyIdentifier): Promise<ApiResponse<Company>>;\n    find(identifier: CompanyIdentifier, cb: callback<ApiResponse<Company>>): void;\n\n    list(): Promise<ApiResponse<CompanyList>>;\n    list(cb: callback<ApiResponse<CompanyList>>): void;\n\n    listBy(params: { tag_id?: string; segment_id?: string }): Promise<ApiResponse<CompanyList>>;\n    listBy(params: { tag_id?: string; segment_id?: string }, cb: callback<ApiResponse<CompanyList>>): void;\n\n    scroll: Scroll<Company>;\n\n    archive(): Promise<Company>;\n}\n\nexport class Tags {\n    create(tag: Partial<Tag>): Promise<ApiResponse<Tag>>;\n    create(tag: Partial<Tag>, cb: callback<ApiResponse<Tag>>): void;\n\n    tag(tagOper: TagOper): Promise<ApiResponse<Tag>>;\n    tag(tagOper: TagOper, cb: callback<ApiResponse<Tag>>): void;\n\n    untag(tagOper: TagOper): Promise<ApiResponse<Tag>>;\n    untag(tagOper: TagOper, cb: callback<ApiResponse<Tag>>): void;\n\n    delete(tag: TagIdentifier): Promise<IncomingMessage>;\n    delete(tag: TagIdentifier, cb: callback<IncomingMessage>): void;\n\n    list(): Promise<ApiResponse<TagList>>;\n    list(cb: callback<ApiResponse<TagList>>): void;\n}\n\nexport class Events {\n    create(event: Partial<Event>): Promise<IncomingMessage>;\n    create(event: Partial<Event>, cb: callback<IncomingMessage>): void;\n\n    listBy(params: EventListParam): Promise<ApiResponse<CompanyList>>;\n    listBy(params: EventListParam, cb: callback<ApiResponse<CompanyList>>): void;\n}\n\nexport class Messages {\n    create(message: Partial<CreateMessage>): Promise<ApiResponse<Message>>;\n    create(message: Partial<CreateMessage>, cb: callback<ApiResponse<Message>>): void;\n}\n",
  "ceb74b3471454b2f57cbe671e130028c680ffb88:types/intercom-client/index.d.ts": "// Type definitions for intercom-client 2.11\n// Project: https://github.com/intercom/intercom-node\n// Definitions by: Jinesh Shah <https://github.com/jineshshah36>\n//                 Josef Hornych <https://github.com/peping>\n//                 Mikhail Monchak <https://github.com/mikhail-monchak>\n//                 Chris Doe <https://github.com/cdoe>\n//                 Malith Wijenayake <https://github.com/malithrw>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n// TypeScript Version: 2.2\n/// <reference types=\"node\" />\n\nimport {\n    List as UserList,\n    User,\n    UserIdIdentifier,\n    UserEmailIdentifier,\n    UserIdentifier,\n    CreateUpdateUser,\n} from './User';\nimport { List as LeadList, Lead, LeadIdentifier } from './Lead';\nimport { Visitor, VisitorIdentifier } from './Visitor';\nimport { CompanyIdentifier, List as CompanyList, Company } from './Company';\nimport { TagIdentifier, List as TagList, Tag, TagOper } from './Tag';\nimport { List as EventList, Event, ListParam as EventListParam } from './Event';\nimport { CreateMessage, Message } from './Message';\nimport { Scroll } from './Scroll';\nimport { IntercomError } from './IntercomError';\n\nimport { IncomingMessage } from 'http';\nimport request = require('request');\n\nexport { IntercomError };\n\nexport interface IdentityVerificationOptions {\n    secretKey: string;\n    identifier: string;\n}\n\nexport const IdentityVerification: {\n    userHash(opts: IdentityVerificationOptions): string;\n};\n\nexport class Client {\n    constructor(auth: { token: string } | { appId: string; appApiKey: string });\n    constructor(username: string, password: string);\n\n    users: Users;\n    companies: Companies;\n    tags: Tags;\n    events: Events;\n    contacts: Leads;\n    leads: Leads;\n    visitors: Visitors;\n    messages: Messages;\n\n    /**\n     * client library also supports passing in `request` options\n     * Note that certain request options (such as `json`, and certain `headers` names cannot be overridden).\n     */\n    useRequestOpts(options?: request.CoreOptions): this;\n}\n\nexport class ApiResponse<T> extends IncomingMessage {\n    body: T;\n}\n\nexport type callback<T> = ((d: T) => void) | ((err: IntercomError, d: T) => void);\n\nexport class Users {\n    create(user: Partial<CreateUpdateUser>): Promise<ApiResponse<User>>;\n    create(user: Partial<CreateUpdateUser>, cb: callback<ApiResponse<User>>): void;\n\n    update(user: UserIdentifier & Partial<CreateUpdateUser>): Promise<ApiResponse<User>>;\n    update(user: UserIdentifier & Partial<CreateUpdateUser>, cb: callback<ApiResponse<User>>): void;\n\n    find(identifier: UserIdIdentifier): Promise<ApiResponse<User>>;\n    find(identifier: UserIdIdentifier, cb: callback<ApiResponse<User>>): void;\n    find(identifier: UserEmailIdentifier): Promise<ApiResponse<UserList>>;\n    find(identifier: UserEmailIdentifier, cb: callback<ApiResponse<UserList>>): void;\n    find(identifier: UserIdentifier): Promise<ApiResponse<User | UserList>>;\n    find(identifier: UserIdentifier, cb: callback<ApiResponse<User | UserList>>): void;\n\n    list(): Promise<ApiResponse<UserList>>;\n    list(cb: callback<ApiResponse<UserList>>): void;\n\n    listBy(params: { tag_id?: string; segment_id?: string }): Promise<ApiResponse<UserList>>;\n    listBy(params: { tag_id?: string; segment_id?: string }, cb: callback<ApiResponse<UserList>>): void;\n\n    scroll: Scroll<User>;\n\n    archive(identifier: UserIdentifier): Promise<ApiResponse<User>>;\n    archive(identifier: UserIdentifier, cb: callback<ApiResponse<User>>): void;\n\n    requestPermanentDeletion(id: string): Promise<{ id: number }>;\n    requestPermanentDeletion(id: string, cb: callback<{ id: number }>): void;\n\n    requestPermanentDeletionByParams(identifier: UserIdentifier): Promise<{ id: number }>;\n    requestPermanentDeletionByParams(identifier: UserIdentifier, cb: callback<{ id: number }>): void;\n}\n\nexport class Leads {\n    create(lead: Partial<Lead>): Promise<ApiResponse<Lead>>;\n    create(lead: Partial<Lead>, cb: callback<ApiResponse<Lead>>): void;\n\n    update(lead: UserIdentifier & Partial<Lead>): Promise<ApiResponse<Lead>>;\n    update(lead: UserIdentifier & Partial<Lead>, cb: callback<ApiResponse<Lead>>): void;\n\n    list(): Promise<ApiResponse<LeadList>>;\n    list(cb: callback<ApiResponse<LeadList>>): void;\n\n    listBy(params: { email?: string; tag_id?: string; segment_id?: string }): Promise<ApiResponse<LeadList>>;\n    listBy(params: { email?: string; tag_id?: string; segment_id?: string }, cb: callback<ApiResponse<LeadList>>): void;\n\n    find(identifier: LeadIdentifier): Promise<ApiResponse<Lead>>;\n    find(identifier: LeadIdentifier, cb: callback<ApiResponse<Lead>>): void;\n\n    delete(id: string): Promise<ApiResponse<Lead>>;\n    delete(id: string, cb: callback<ApiResponse<Lead>>): void;\n\n    convert(params: { contact: LeadIdentifier; user: UserIdentifier }): Promise<ApiResponse<Lead>>;\n    convert(params: { contact: LeadIdentifier; user: UserIdentifier }, cb: callback<ApiResponse<Lead>>): void;\n}\n\nexport class Visitors {\n    update(visitor: VisitorIdentifier & Partial<Visitor>): Promise<ApiResponse<Visitor>>;\n    update(visitor: VisitorIdentifier & Partial<Visitor>, cb: callback<ApiResponse<Visitor>>): void;\n\n    find(identifier: VisitorIdentifier): Promise<ApiResponse<Visitor>>;\n    find(identifier: VisitorIdentifier, cb: callback<ApiResponse<Visitor>>): void;\n\n    delete(id: string): Promise<ApiResponse<Visitor>>;\n    delete(id: string, cb: callback<ApiResponse<Visitor>>): void;\n\n    convert(params: { identifier: VisitorIdentifier; type: 'lead' }): Promise<ApiResponse<Lead>>;\n    convert(params: { identifier: VisitorIdentifier; type: 'user'; user: UserIdentifier }): Promise<ApiResponse<User>>;\n\n    convert(\n        params: {\n            identifier: VisitorIdentifier;\n            type: 'lead';\n        },\n        cb: callback<ApiResponse<Lead>>,\n    ): void;\n    convert(\n        params: {\n            identifier: VisitorIdentifier;\n            type: 'user';\n            user: UserIdentifier;\n        },\n        cb: callback<ApiResponse<User>>,\n    ): void;\n}\n\nexport class Companies {\n    create(company: CompanyIdentifier & Partial<Company>): Promise<ApiResponse<Company>>;\n    create(company: CompanyIdentifier & Partial<Company>, cb: callback<ApiResponse<Company>>): void;\n\n    update(company: CompanyIdentifier & Partial<Company>): Promise<ApiResponse<Company>>;\n    update(company: CompanyIdentifier & Partial<Company>, cb: callback<ApiResponse<Company>>): void;\n\n    find(identifier: CompanyIdentifier): Promise<ApiResponse<Company>>;\n    find(identifier: CompanyIdentifier, cb: callback<ApiResponse<Company>>): void;\n\n    list(): Promise<ApiResponse<CompanyList>>;\n    list(cb: callback<ApiResponse<CompanyList>>): void;\n\n    listBy(params: { tag_id?: string; segment_id?: string }): Promise<ApiResponse<CompanyList>>;\n    listBy(params: { tag_id?: string; segment_id?: string }, cb: callback<ApiResponse<CompanyList>>): void;\n\n    scroll: Scroll<Company>;\n\n    archive(): Promise<Company>;\n}\n\nexport class Tags {\n    create(tag: Partial<Tag>): Promise<ApiResponse<Tag>>;\n    create(tag: Partial<Tag>, cb: callback<ApiResponse<Tag>>): void;\n\n    tag(tagOper: TagOper): Promise<ApiResponse<Tag>>;\n    tag(tagOper: TagOper, cb: callback<ApiResponse<Tag>>): void;\n\n    untag(tagOper: TagOper): Promise<ApiResponse<Tag>>;\n    untag(tagOper: TagOper, cb: callback<ApiResponse<Tag>>): void;\n\n    delete(tag: TagIdentifier): Promise<IncomingMessage>;\n    delete(tag: TagIdentifier, cb: callback<IncomingMessage>): void;\n\n    list(): Promise<ApiResponse<TagList>>;\n    list(cb: callback<ApiResponse<TagList>>): void;\n}\n\nexport class Events {\n    create(event: Partial<Event>): Promise<IncomingMessage>;\n    create(event: Partial<Event>, cb: callback<IncomingMessage>): void;\n\n    listBy(params: EventListParam): Promise<ApiResponse<CompanyList>>;\n    listBy(params: EventListParam, cb: callback<ApiResponse<CompanyList>>): void;\n}\n\nexport class Messages {\n    create(message: Partial<CreateMessage>): Promise<ApiResponse<Message>>;\n    create(message: Partial<CreateMessage>, cb: callback<ApiResponse<Message>>): void;\n}\n"
}
