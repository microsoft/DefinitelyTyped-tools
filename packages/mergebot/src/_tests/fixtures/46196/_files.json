{
  "2f300d234e09e9e34c88e884f6466f2d6d0db399:types/date-arithmetic/tsconfig.json": "{\n    \"compilerOptions\": {\n        \"module\": \"commonjs\",\n        \"lib\": [\"es6\"],\n        \"noImplicitAny\": true,\n        \"noImplicitThis\": true,\n        \"strictNullChecks\": true,\n        \"strictFunctionTypes\": true,\n        \"baseUrl\": \"../\",\n        \"typeRoots\": [\"../\"],\n        \"types\": [],\n        \"noEmit\": true,\n        \"forceConsistentCasingInFileNames\": true\n    },\n    \"files\": [\"index.d.ts\", \"some-new-file.ts\"]\n}\n",
  "2f300d234e09e9e34c88e884f6466f2d6d0db399:types/date-arithmetic/tslint.json": "{\n    \"extends\": \"@definitelytyped/dtslint/dt.json\"\n}\n",
  "master:types/date-arithmetic/tsconfig.json": "{\n    \"compilerOptions\": {\n        \"module\": \"commonjs\",\n        \"lib\": [\n            \"es6\"\n        ],\n        \"noImplicitAny\": true,\n        \"noImplicitThis\": true,\n        \"strictNullChecks\": true,\n        \"strictFunctionTypes\": true,\n        \"baseUrl\": \"../\",\n        \"typeRoots\": [\n            \"../\"\n        ],\n        \"types\": [],\n        \"noEmit\": true,\n        \"forceConsistentCasingInFileNames\": true\n    },\n    \"files\": [\n        \"an-old-file.ts\",\n        \"index.d.ts\",\n        \"date-arithmetic-tests.ts\"\n    ]\n}\n",
  "master:types/date-arithmetic/index.d.ts": "// Type definitions for date-arithmetic v3.1.0\n// Project: https://github.com/jquense/date-math\n// Definitions by: Sergii Paryzhskyi <https://github.com/HeeL>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n\ntype Unit = 'second' | 'minutes' | 'hours' | 'day' | 'week' | 'month' | 'year' | 'decade' | 'century';\n\n/** dateArithmetic Public Instance Methods */\ninterface dateArithmeticStatic {\n    /** Add specified amount of units to a provided date and return new date as a result */\n    add(date: Date, num: number, unit: Unit): Date;\n\n    /** Subtract specified amount of units from a provided date and return new date as a result */\n    subtract(date: Date, num: number, unit: Unit): Date;\n\n    /** Compare two dates and return true if they are equal */\n    eq(date: Date, date2: Date): Boolean;\n\n    /** Compare two dates and return false if they are equal */\n    neq(date: Date, date2: Date): Boolean;\n\n    /** Compare two dates and return true if date is greater than date2 */\n    gt(date: Date, date2: Date): Boolean;\n\n    /** Compare two dates and return true if date is greater or equal than date2 */\n    gte(date: Date, date2: Date): Boolean;\n\n    /** Compare two dates and return true if date is less than date2 */\n    lt(date: Date, date2: Date): Boolean;\n\n    /** Compare two dates and return true if date is less or equal than date2 */\n    lte(date: Date, date2: Date): Boolean;\n}\n\ndeclare module 'dateArithmetic' {\n    const dateArithmetic: dateArithmeticStatic;\n    export = dateArithmetic;\n}\n",
  "2f300d234e09e9e34c88e884f6466f2d6d0db399:types/date-arithmetic/index.d.ts": "// Type definitions for date-arithmetic v4.1\n// Project: https://github.com/jquense/date-math\n// Definitions by: Sergii Paryzhskyi <https://github.com/HeeL>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n\ntype Unit = 'second' | 'minutes' | 'hours' | 'day' | 'week' | 'month' | 'year' | 'decade' | 'century';\n\n/** dateArithmetic Public Instance Methods */\ninterface dateArithmeticStatic {\n    /** Add specified amount of units to a provided date and return new date as a result */\n    add(date: Date, num: number, unit: Unit): Date;\n\n    /** Subtract specified amount of units from a provided date and return new date as a result */\n    subtract(date: Date, num: number, unit: Unit): Date;\n\n    /** Compare two dates and return true if they are equal */\n    eq(date: Date, date2: Date): Boolean;\n\n    /** Compare two dates and return false if they are equal */\n    neq(date: Date, date2: Date): Boolean;\n\n    /** Compare two dates and return true if date is greater than date2 */\n    gt(date: Date, date2: Date): Boolean;\n\n    /** Compare two dates and return true if date is greater or equal than date2 */\n    gte(date: Date, date2: Date): Boolean;\n\n    /** Compare two dates and return true if date is less than date2 */\n    lt(date: Date, date2: Date): Boolean;\n\n    /** Compare two dates and return true if date is less or equal than date2 */\n    lte(date: Date, date2: Date): Boolean;\n}\n\ndeclare module 'dateArithmetic' {\n    const dateArithmetic: dateArithmeticStatic;\n    export = dateArithmetic;\n}\n"
}
