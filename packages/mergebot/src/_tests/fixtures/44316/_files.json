{
  "master:types/vimeo/index.d.ts": "// Type definitions for Vimeo 2.1\n// Project: https://github.com/vimeo/vimeo.js\n// Definitions by: Matthew Leffler <https://github.com/mattleff>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n\nexport type CompleteCallback = (\n    err: string | undefined,\n    result: any,\n    statusCode?: number,\n    headers?: object\n) => void;\n\nexport type ProgressCallback = (bytesUploaded: number, bytesTotal: number) => void;\nexport type ErrorCallback = (err: string) => void;\nexport type UriCallback = (uri: string) => void;\n\nexport interface RequestOptions {\n    method: string;\n    path: string;\n    query?: string;\n    headers?: object;\n}\n\nexport class Vimeo {\n    /**\n     * This object is used to interface with the Vimeo API.\n     *\n     * @param clientId     OAuth 2 Client Identifier\n     * @param clientSecret OAuth 2 Client Secret\n     * @param accessToken  OAuth 2 Optional pre-authorized access token\n     */\n    constructor(clientId: string, clientSecret: string, accessToken?: string);\n\n    /**\n     * Performs an API call.\n     *\n     * Can be called one of two ways:\n     *\n     * 1. Url + Callback\n     *    If a url is provided, we fill in the rest of the request options with defaults\n     *    (GET http://api.vimeo.com/{url}).\n     *\n     * 2. Options + callback\n     *    If an object is provided, it should match the response of urlModule.parse. Path is the only\n     *    required parameter.\n     *\n     *    - hostname\n     *    - port\n     *    - query (will be applied to the url if GET, request body if POST)\n     *    - headers\n     *    - path (can include a querystring)\n     *    - method\n     *\n     * The callback takes two parameters, `err` and `json`.\n     * If an error has occured, your callback will be called as `callback(err)`;\n     * If an error has not occured, your callback will be called as `callback(null, json)`;\n     *\n     * @param options   String path (default GET), or object with `method`, path`,\n     *                                  `host`, `port`, `query` or `headers`.\n     * @param callback  Called when complete, `function (err, json)`.\n     */\n    request(url: string | RequestOptions, callback: CompleteCallback): void;\n\n    /**\n     * Set a user access token to be used with library requests.\n     *\n     * @param accessToken\n     */\n    setAccessToken(accessToken: string): void;\n\n    /**\n     * Exchange a code for an access token. This code should exist on your `redirectUri`.\n     *\n     * @param code         The code provided on your `redirectUri`.\n     * @param redirectUri  The exact `redirectUri` provided to `buildAuthorizationEndpoint`\n     *                                and configured in your API app settings.\n     * @param fn           Callback to execute on completion.\n     */\n    accessToken(code: string, redirectUri: string, fn: CompleteCallback): void;\n\n    /**\n     * The first step of the authorization process.\n     *\n     * This function returns a URL, which the user should be sent to (via redirect or link).\n     *\n     * The destination allows the user to accept or deny connecting with vimeo, and accept or deny each\n     * of the scopes you requested. Scopes are passed through the second parameter as an array of\n     * strings, or a space delimited list.\n     *\n     * Once accepted or denied, the user is redirected back to the `redirectUri`.\n     *\n     * @param redirectUri   The URI that will exchange a code for an access token. Must match\n     *                                the URI in your API app settings.\n     * @param scope  An array of scopes. See https://developer.vimeo.com/api/authentication#scopes\n     *                                for more.\n     * @param state         A unique state that will be returned to you on your redirect URI.\n     */\n    buildAuthorizationEndpoint(redirectUri: string, scope: string | string[], state: string): void;\n\n    /**\n     * Generates an unauthenticated access token. This is necessary to make unauthenticated requests\n     *\n     * @param scope  An array of scopes. See https://developer.vimeo.com/api/authentication#scopes\n     *                          for more.\n     * @param fn    A function that is called when the request is complete. If an error\n     *                          occured the first parameter will be that error, otherwise the first\n     *                          parameter will be null.\n     */\n    generateClientCredentials(scope: string | string[], fn: CompleteCallback): void;\n\n    /**\n     * Upload a file.\n     *\n     * This should be used to upload a local file. If you want a form for your site to upload direct to\n     * Vimeo, you should look at the `POST /me/videos` endpoint.\n     *\n     * https://developer.vimeo.com/api/reference/videos#upload_video\n     *\n     * @param file              Path to the file you wish to upload.\n     * @param params            Parameters to send when creating a new video (name,\n     *                                      privacy restrictions, etc.). See the API documentation for\n     *                                      supported parameters.\n     * @param completeCallback  Callback to be executed when the upload completes.\n     * @param progressCallback  Callback to be executed when upload progress is updated.\n     * @param errorCallback     Callback to be executed when the upload returns an error.\n     */\n    upload(\n        filePath: string,\n        params: object,\n        completeCallback: UriCallback,\n        progressCallback: ProgressCallback | undefined,\n        errorCallback: ErrorCallback,\n    ): void;\n    upload(\n        filePath: string,\n        completeCallback: UriCallback,\n        progressCallback: ProgressCallback | undefined,\n        errorCallback: ErrorCallback,\n    ): void;\n\n    /**\n     * Replace the source of a single Vimeo video.\n     *\n     * https://developer.vimeo.com/api/reference/videos#create_video_version\n     *\n     * @param file              Path to the file you wish to upload.\n     * @param videoUri          Video URI of the video file to replace.\n     * @param params            Parameters to send when creating a new video (name,\n     *                                      privacy restrictions, etc.). See the API documentation for\n     *                                      supported parameters.\n     * @param completeCallback  Callback to be executed when the upload completes.\n     * @param progressCallback  Callback to be executed when upload progress is updated.\n     * @param errorCallback     Callback to be executed when the upload returns an error.\n     */\n    replace(\n        file: string,\n        videoUri: string,\n        params: object,\n        completeCallback: UriCallback,\n        progressCallback: ProgressCallback | undefined,\n        errorCallback: ErrorCallback,\n    ): void;\n}\n",
  "55357f7d60d059b5c84a23bd92854276a8f9a419:types/vimeo/index.d.ts": "// Type definitions for Vimeo 2.1\n// Project: https://github.com/vimeo/vimeo.js\n// Definitions by: Matthew Leffler <https://github.com/mattleff>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n\nexport type CompleteCallback = (\n    err: string | undefined,\n    result: any,\n    statusCode?: number,\n    headers?: object\n) => void;\n\nexport type ProgressCallback = (bytesUploaded: number, bytesTotal: number) => void;\nexport type ErrorCallback = (err: string) => void;\nexport type UriCallback = (uri: string) => void;\n\nexport interface RequestOptions {\n    method: string;\n    path: string;\n    query?: string;\n    headers?: object;\n}\n\nexport class Vimeo {\n    /**\n     * This object is used to interface with the Vimeo API.\n     *\n     * @param clientId     OAuth 2 Client Identifier\n     * @param clientSecret OAuth 2 Client Secret\n     * @param accessToken  OAuth 2 Optional pre-authorized access token\n     */\n    constructor(clientId: string, clientSecret: string, accessToken?: string);\n\n    /**\n     * Performs an API call.\n     *\n     * Can be called one of two ways:\n     *\n     * 1. Url + Callback\n     *    If a url is provided, we fill in the rest of the request options with defaults\n     *    (GET http://api.vimeo.com/{url}).\n     *\n     * 2. Options + callback\n     *    If an object is provided, it should match the response of urlModule.parse. Path is the only\n     *    required parameter.\n     *\n     *    - hostname\n     *    - port\n     *    - query (will be applied to the url if GET, request body if POST)\n     *    - headers\n     *    - path (can include a querystring)\n     *    - method\n     *\n     * The callback takes two parameters, `err` and `json`.\n     * If an error has occured, your callback will be called as `callback(err)`;\n     * If an error has not occured, your callback will be called as `callback(null, json)`;\n     *\n     * @param options   String path (default GET), or object with `method`, path`,\n     *                                  `host`, `port`, `query` or `headers`.\n     * @param callback  Called when complete, `function (err, json)`.\n     */\n    request(url: string | RequestOptions, callback: CompleteCallback): void;\n\n    /**\n     * Set a user access token to be used with library requests.\n     *\n     * @param accessToken\n     */\n    setAccessToken(accessToken: string): void;\n\n    /**\n     * Exchange a code for an access token. This code should exist on your `redirectUri`.\n     *\n     * @param code         The code provided on your `redirectUri`.\n     * @param redirectUri  The exact `redirectUri` provided to `buildAuthorizationEndpoint`\n     *                                and configured in your API app settings.\n     * @param fn           Callback to execute on completion.\n     */\n    accessToken(code: string, redirectUri: string, fn: CompleteCallback): void;\n\n    /**\n     * The first step of the authorization process.\n     *\n     * This function returns a URL, which the user should be sent to (via redirect or link).\n     *\n     * The destination allows the user to accept or deny connecting with vimeo, and accept or deny each\n     * of the scopes you requested. Scopes are passed through the second parameter as an array of\n     * strings, or a space delimited list.\n     *\n     * Once accepted or denied, the user is redirected back to the `redirectUri`.\n     *\n     * @param redirectUri   The URI that will exchange a code for an access token. Must match\n     *                                the URI in your API app settings.\n     * @param scope  An array of scopes. See https://developer.vimeo.com/api/authentication#scopes\n     *                                for more.\n     * @param state         A unique state that will be returned to you on your redirect URI.\n     */\n    buildAuthorizationEndpoint(redirectUri: string, scope: string | string[], state: string): void;\n\n    /**\n     * Generates an unauthenticated access token. This is necessary to make unauthenticated requests\n     *\n     * @param scope  An array of scopes. See https://developer.vimeo.com/api/authentication#scopes\n     *                          for more.\n     * @param fn    A function that is called when the request is complete. If an error\n     *                          occured the first parameter will be that error, otherwise the first\n     *                          parameter will be null.\n     */\n    generateClientCredentials(scope: string | string[], fn: CompleteCallback): void;\n\n    /**\n     * Upload a file.\n     *\n     * This should be used to upload a local file. If you want a form for your site to upload direct to\n     * Vimeo, you should look at the `POST /me/videos` endpoint.\n     *\n     * https://developer.vimeo.com/api/reference/videos#upload_video\n     *\n     * @param file              Path to the file you wish to upload.\n     * @param params            Parameters to send when creating a new video (name,\n     *                                      privacy restrictions, etc.). See the API documentation for\n     *                                      supported parameters.\n     * @param completeCallback  Callback to be executed when the upload completes.\n     * @param progressCallback  Callback to be executed when upload progress is updated.\n     * @param errorCallback     Callback to be executed when the upload returns an error.\n     */\n    upload(\n        filePath: string,\n        params: object,\n        completeCallback: UriCallback,\n        progressCallback: ProgressCallback | undefined,\n        errorCallback: ErrorCallback,\n    ): void;\n    upload(\n        filePath: string,\n        completeCallback: UriCallback,\n        progressCallback: ProgressCallback | undefined,\n        errorCallback: ErrorCallback,\n    ): void;\n\n    /**\n     * Replace the source of a single Vimeo video.\n     *\n     * https://developer.vimeo.com/api/reference/videos#create_video_version\n     *\n     * @param file              Path to the file you wish to upload.\n     * @param videoUri          Video URI of the video file to replace.\n     * @param params            Parameters to send when creating a new video (name,\n     *                                      privacy restrictions, etc.). See the API documentation for\n     *                                      supported parameters.\n     * @param completeCallback  Callback to be executed when the upload completes.\n     * @param progressCallback  Callback to be executed when upload progress is updated.\n     * @param errorCallback     Callback to be executed when the upload returns an error.\n     */\n    replace(\n        file: string,\n        videoUri: string,\n        params: object,\n        completeCallback: UriCallback,\n        progressCallback: ProgressCallback | undefined,\n        errorCallback: ErrorCallback,\n    ): void;\n}\n"
}
