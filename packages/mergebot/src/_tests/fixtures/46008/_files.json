{
  "master:types/p5/index.d.ts": "// Type definitions for p5 0.9\n// Project: https://github.com/processing/p5.js\n// Definitions by: p5-types <https://github.com/p5-types>\n//                 Pierre Krafft <https://github.com/Zalastax>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n// TypeScript Version: 2.9\n\n// This file was auto-generated. Please do not edit it.\n\n/// <reference path=\"./lib/addons/p5.dom.d.ts\" />\n/// <reference path=\"./src/color/creating_reading.d.ts\" />\n/// <reference path=\"./src/color/setting.d.ts\" />\n/// <reference path=\"./src/core/shape/2d_primitives.d.ts\" />\n/// <reference path=\"./src/core/shape/attributes.d.ts\" />\n/// <reference path=\"./src/core/shape/curves.d.ts\" />\n/// <reference path=\"./src/core/shape/vertex.d.ts\" />\n/// <reference path=\"./src/core/constants.d.ts\" />\n/// <reference path=\"./src/core/environment.d.ts\" />\n/// <reference path=\"./src/core/rendering.d.ts\" />\n/// <reference path=\"./src/core/structure.d.ts\" />\n/// <reference path=\"./src/core/transform.d.ts\" />\n/// <reference path=\"./src/data/local_storage.d.ts\" />\n/// <reference path=\"./src/data/p5.TypedDict.d.ts\" />\n/// <reference path=\"./src/events/acceleration.d.ts\" />\n/// <reference path=\"./src/events/keyboard.d.ts\" />\n/// <reference path=\"./src/events/mouse.d.ts\" />\n/// <reference path=\"./src/events/touch.d.ts\" />\n/// <reference path=\"./src/image/image.d.ts\" />\n/// <reference path=\"./src/image/loading_displaying.d.ts\" />\n/// <reference path=\"./src/image/pixels.d.ts\" />\n/// <reference path=\"./src/io/files.d.ts\" />\n/// <reference path=\"./src/math/calculation.d.ts\" />\n/// <reference path=\"./src/math/math.d.ts\" />\n/// <reference path=\"./src/math/noise.d.ts\" />\n/// <reference path=\"./src/math/random.d.ts\" />\n/// <reference path=\"./src/math/trigonometry.d.ts\" />\n/// <reference path=\"./src/typography/attributes.d.ts\" />\n/// <reference path=\"./src/typography/loading_displaying.d.ts\" />\n/// <reference path=\"./src/utilities/array_functions.d.ts\" />\n/// <reference path=\"./src/utilities/conversion.d.ts\" />\n/// <reference path=\"./src/utilities/string_functions.d.ts\" />\n/// <reference path=\"./src/utilities/time_date.d.ts\" />\n/// <reference path=\"./src/webgl/3d_primitives.d.ts\" />\n/// <reference path=\"./src/webgl/interaction.d.ts\" />\n/// <reference path=\"./src/webgl/light.d.ts\" />\n/// <reference path=\"./src/webgl/loading.d.ts\" />\n/// <reference path=\"./src/webgl/material.d.ts\" />\n/// <reference path=\"./src/webgl/p5.Camera.d.ts\" />\n/// <reference path=\"./src/webgl/p5.RendererGL.d.ts\" />\n/// <reference path=\"./src/color/p5.Color.d.ts\" />\n/// <reference path=\"./src/core/p5.Element.d.ts\" />\n/// <reference path=\"./src/core/p5.Graphics.d.ts\" />\n/// <reference path=\"./src/image/p5.Image.d.ts\" />\n/// <reference path=\"./src/io/p5.Table.d.ts\" />\n/// <reference path=\"./src/io/p5.TableRow.d.ts\" />\n/// <reference path=\"./src/io/p5.XML.d.ts\" />\n/// <reference path=\"./src/math/p5.Vector.d.ts\" />\n/// <reference path=\"./src/typography/p5.Font.d.ts\" />\n/// <reference path=\"./src/webgl/p5.Geometry.d.ts\" />\n/// <reference path=\"./src/webgl/p5.Shader.d.ts\" />\n/// <reference path=\"./src/core/p5.Renderer.d.ts\" />\n/// <reference path=\"./literals.d.ts\" />\n/// <reference path=\"./constants.d.ts\" />\nexport = p5;\ndeclare class p5 {\n    /**\n     *   This is the p5 instance constructor. A p5 instance\n     *   holds all the properties and methods related to a\n     *   p5 sketch. It expects an incoming sketch closure\n     *   and it can also take an optional node parameter\n     *   for attaching the generated p5 canvas to a node.\n     *   The sketch closure takes the newly created p5\n     *   instance as its sole argument and may optionally\n     *   set preload(), setup(), and/or draw() properties\n     *   on it for running a sketch.\n     *\n     *   A p5 sketch can run in \"global\" or \"instance\"\n     *   mode: \"global\" - all properties and methods are\n     *   attached to the window \"instance\" - all properties\n     *   and methods are bound to this p5 object\n     *\n     *   @param sketch a closure that can set optional\n     *   preload(), setup(), and/or draw() properties on\n     *   the given p5 instance\n     *   @param [node] element to attach canvas to\n     *   @return a p5 instance\n     */\n    constructor(sketch: (...args: any[]) => any, node?: HTMLElement);\n\n    /**\n     *   Called directly before setup(), the preload()\n     *   function is used to handle asynchronous loading of\n     *   external files in a blocking way. If a preload\n     *   function is defined, setup() will wait until any\n     *   load calls within have finished. Nothing besides\n     *   load calls (loadImage, loadJSON, loadFont,\n     *   loadStrings, etc.) should be inside the preload\n     *   function. If asynchronous loading is preferred,\n     *   the load methods can instead be called in setup()\n     *   or anywhere else with the use of a callback\n     *   parameter.  By default the text \"loading...\" will\n     *   be displayed. To make your own loading page,\n     *   include an HTML element with id \"p5_loading\" in\n     *   your page. More information here.\n     */\n    preload(): void;\n\n    /**\n     *   The setup() function is called once when the\n     *   program starts. It's used to define initial\n     *   environment properties such as screen size and\n     *   background color and to load media such as images\n     *   and fonts as the program starts. There can only be\n     *   one setup() function for each program and it\n     *   shouldn't be called again after its initial\n     *   execution.  Note: Variables declared within\n     *   setup() are not accessible within other functions,\n     *   including draw().\n     */\n    setup(): void;\n\n    /**\n     *   Called directly after setup(), the draw() function\n     *   continuously executes the lines of code contained\n     *   inside its block until the program is stopped or\n     *   noLoop() is called. Note if noLoop() is called in\n     *   setup(), draw() will still be executed once before\n     *   stopping. draw() is called automatically and\n     *   should never be called explicitly.  It should\n     *   always be controlled with noLoop(), redraw() and\n     *   loop(). After noLoop() stops the code in draw()\n     *   from executing, redraw() causes the code inside\n     *   draw() to execute once, and loop() will cause the\n     *   code inside draw() to resume executing\n     *   continuously.\n     *\n     *\n     *   The number of times draw() executes in each second\n     *   may be controlled with the frameRate() function.\n     *\n     *\n     *   There can only be one draw() function for each\n     *   sketch, and draw() must exist if you want the code\n     *   to run continuously, or to process events such as\n     *   mousePressed(). Sometimes, you might have an empty\n     *   call to draw() in your program, as shown in the\n     *   above example.\n     *\n     *\n     *   It is important to note that the drawing\n     *   coordinate system will be reset at the beginning\n     *   of each draw() call. If any transformations are\n     *   performed within draw() (ex: scale, rotate,\n     *   translate), their effects will be undone at the\n     *   beginning of draw(), so transformations will not\n     *   accumulate over time. On the other hand, styling\n     *   applied (ex: fill, stroke, etc) will remain in\n     *   effect.\n     */\n    draw(): void;\n\n    /**\n     *   Removes the entire p5 sketch. This will remove the\n     *   canvas and any elements created by p5.js. It will\n     *   also stop the draw loop and unbind any properties\n     *   or methods from the window global scope. It will\n     *   leave a variable p5 in case you wanted to create a\n     *   new p5 sketch. If you like, you can set p5 = null\n     *   to erase it. While all functions and variables and\n     *   objects created by the p5 library will be removed,\n     *   any other global variables created by your code\n     *   will remain.\n     */\n    remove(): void;\n\n    /**\n     *   Allows for the friendly error system (FES) to be\n     *   turned off when creating a sketch, which can give\n     *   a significant boost to performance when needed.\n     *   See  disabling the friendly error system.\n     */\n    disableFriendlyErrors: boolean;\n}\n\n// tslint:disable-next-line:no-empty-interface\ninterface p5 extends p5.p5InstanceExtensions {}\n\ndeclare namespace p5 {\n    type UNKNOWN_P5_CONSTANT = any;\n    // tslint:disable-next-line:no-empty-interface\n    interface p5InstanceExtensions {}\n}\n",
  "3e19cb9cae4689fb736fd6682f7f76d8efafcaa2:types/p5/index.d.ts": "// Type definitions for p5 0.9\n// Project: https://github.com/processing/p5.js\n// Definitions by: p5-types <https://github.com/p5-types>\n//                 Pierre Krafft <https://github.com/Zalastax>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n// TypeScript Version: 2.9\n\n// This file was auto-generated. Please do not edit it.\n\n/// <reference path=\"./lib/addons/p5.dom.d.ts\" />\n/// <reference path=\"./src/color/creating_reading.d.ts\" />\n/// <reference path=\"./src/color/setting.d.ts\" />\n/// <reference path=\"./src/core/shape/2d_primitives.d.ts\" />\n/// <reference path=\"./src/core/shape/attributes.d.ts\" />\n/// <reference path=\"./src/core/shape/curves.d.ts\" />\n/// <reference path=\"./src/core/shape/vertex.d.ts\" />\n/// <reference path=\"./src/core/constants.d.ts\" />\n/// <reference path=\"./src/core/environment.d.ts\" />\n/// <reference path=\"./src/core/rendering.d.ts\" />\n/// <reference path=\"./src/core/structure.d.ts\" />\n/// <reference path=\"./src/core/transform.d.ts\" />\n/// <reference path=\"./src/data/local_storage.d.ts\" />\n/// <reference path=\"./src/data/p5.TypedDict.d.ts\" />\n/// <reference path=\"./src/events/acceleration.d.ts\" />\n/// <reference path=\"./src/events/keyboard.d.ts\" />\n/// <reference path=\"./src/events/mouse.d.ts\" />\n/// <reference path=\"./src/events/touch.d.ts\" />\n/// <reference path=\"./src/image/image.d.ts\" />\n/// <reference path=\"./src/image/loading_displaying.d.ts\" />\n/// <reference path=\"./src/image/pixels.d.ts\" />\n/// <reference path=\"./src/io/files.d.ts\" />\n/// <reference path=\"./src/math/calculation.d.ts\" />\n/// <reference path=\"./src/math/math.d.ts\" />\n/// <reference path=\"./src/math/noise.d.ts\" />\n/// <reference path=\"./src/math/random.d.ts\" />\n/// <reference path=\"./src/math/trigonometry.d.ts\" />\n/// <reference path=\"./src/typography/attributes.d.ts\" />\n/// <reference path=\"./src/typography/loading_displaying.d.ts\" />\n/// <reference path=\"./src/utilities/array_functions.d.ts\" />\n/// <reference path=\"./src/utilities/conversion.d.ts\" />\n/// <reference path=\"./src/utilities/string_functions.d.ts\" />\n/// <reference path=\"./src/utilities/time_date.d.ts\" />\n/// <reference path=\"./src/webgl/3d_primitives.d.ts\" />\n/// <reference path=\"./src/webgl/interaction.d.ts\" />\n/// <reference path=\"./src/webgl/light.d.ts\" />\n/// <reference path=\"./src/webgl/loading.d.ts\" />\n/// <reference path=\"./src/webgl/material.d.ts\" />\n/// <reference path=\"./src/webgl/p5.Camera.d.ts\" />\n/// <reference path=\"./src/webgl/p5.RendererGL.d.ts\" />\n/// <reference path=\"./src/color/p5.Color.d.ts\" />\n/// <reference path=\"./src/core/p5.Element.d.ts\" />\n/// <reference path=\"./src/core/p5.Graphics.d.ts\" />\n/// <reference path=\"./src/image/p5.Image.d.ts\" />\n/// <reference path=\"./src/io/p5.Table.d.ts\" />\n/// <reference path=\"./src/io/p5.TableRow.d.ts\" />\n/// <reference path=\"./src/io/p5.XML.d.ts\" />\n/// <reference path=\"./src/math/p5.Vector.d.ts\" />\n/// <reference path=\"./src/typography/p5.Font.d.ts\" />\n/// <reference path=\"./src/webgl/p5.Geometry.d.ts\" />\n/// <reference path=\"./src/webgl/p5.Shader.d.ts\" />\n/// <reference path=\"./src/core/p5.Renderer.d.ts\" />\n/// <reference path=\"./literals.d.ts\" />\n/// <reference path=\"./constants.d.ts\" />\nexport = p5;\ndeclare class p5 {\n    /**\n     *   This is the p5 instance constructor. A p5 instance\n     *   holds all the properties and methods related to a\n     *   p5 sketch. It expects an incoming sketch closure\n     *   and it can also take an optional node parameter\n     *   for attaching the generated p5 canvas to a node.\n     *   The sketch closure takes the newly created p5\n     *   instance as its sole argument and may optionally\n     *   set preload(), setup(), and/or draw() properties\n     *   on it for running a sketch.\n     *\n     *   A p5 sketch can run in \"global\" or \"instance\"\n     *   mode: \"global\" - all properties and methods are\n     *   attached to the window \"instance\" - all properties\n     *   and methods are bound to this p5 object\n     *\n     *   @param sketch a closure that can set optional\n     *   preload(), setup(), and/or draw() properties on\n     *   the given p5 instance\n     *   @param [node] element to attach canvas to\n     *   @return a p5 instance\n     */\n    constructor(sketch: (...args: any[]) => any, node?: HTMLElement);\n\n    /**\n     *   Called directly before setup(), the preload()\n     *   function is used to handle asynchronous loading of\n     *   external files in a blocking way. If a preload\n     *   function is defined, setup() will wait until any\n     *   load calls within have finished. Nothing besides\n     *   load calls (loadImage, loadJSON, loadFont,\n     *   loadStrings, etc.) should be inside the preload\n     *   function. If asynchronous loading is preferred,\n     *   the load methods can instead be called in setup()\n     *   or anywhere else with the use of a callback\n     *   parameter.  By default the text \"loading...\" will\n     *   be displayed. To make your own loading page,\n     *   include an HTML element with id \"p5_loading\" in\n     *   your page. More information here.\n     */\n    preload(): void;\n\n    /**\n     *   The setup() function is called once when the\n     *   program starts. It's used to define initial\n     *   environment properties such as screen size and\n     *   background color and to load media such as images\n     *   and fonts as the program starts. There can only be\n     *   one setup() function for each program and it\n     *   shouldn't be called again after its initial\n     *   execution.  Note: Variables declared within\n     *   setup() are not accessible within other functions,\n     *   including draw().\n     */\n    setup(): void;\n\n    /**\n     *   Called directly after setup(), the draw() function\n     *   continuously executes the lines of code contained\n     *   inside its block until the program is stopped or\n     *   noLoop() is called. Note if noLoop() is called in\n     *   setup(), draw() will still be executed once before\n     *   stopping. draw() is called automatically and\n     *   should never be called explicitly.  It should\n     *   always be controlled with noLoop(), redraw() and\n     *   loop(). After noLoop() stops the code in draw()\n     *   from executing, redraw() causes the code inside\n     *   draw() to execute once, and loop() will cause the\n     *   code inside draw() to resume executing\n     *   continuously.\n     *\n     *\n     *   The number of times draw() executes in each second\n     *   may be controlled with the frameRate() function.\n     *\n     *\n     *   There can only be one draw() function for each\n     *   sketch, and draw() must exist if you want the code\n     *   to run continuously, or to process events such as\n     *   mousePressed(). Sometimes, you might have an empty\n     *   call to draw() in your program, as shown in the\n     *   above example.\n     *\n     *\n     *   It is important to note that the drawing\n     *   coordinate system will be reset at the beginning\n     *   of each draw() call. If any transformations are\n     *   performed within draw() (ex: scale, rotate,\n     *   translate), their effects will be undone at the\n     *   beginning of draw(), so transformations will not\n     *   accumulate over time. On the other hand, styling\n     *   applied (ex: fill, stroke, etc) will remain in\n     *   effect.\n     */\n    draw(): void;\n\n    /**\n     *   Removes the entire p5 sketch. This will remove the\n     *   canvas and any elements created by p5.js. It will\n     *   also stop the draw loop and unbind any properties\n     *   or methods from the window global scope. It will\n     *   leave a variable p5 in case you wanted to create a\n     *   new p5 sketch. If you like, you can set p5 = null\n     *   to erase it. While all functions and variables and\n     *   objects created by the p5 library will be removed,\n     *   any other global variables created by your code\n     *   will remain.\n     */\n    remove(): void;\n\n    /**\n     *   Allows for the friendly error system (FES) to be\n     *   turned off when creating a sketch, which can give\n     *   a significant boost to performance when needed.\n     *   See  disabling the friendly error system.\n     */\n    disableFriendlyErrors: boolean;\n}\n\n// tslint:disable-next-line:no-empty-interface\ninterface p5 extends p5.p5InstanceExtensions {}\n\ndeclare namespace p5 {\n    type UNKNOWN_P5_CONSTANT = any;\n    // tslint:disable-next-line:no-empty-interface\n    interface p5InstanceExtensions {}\n}\n"
}
