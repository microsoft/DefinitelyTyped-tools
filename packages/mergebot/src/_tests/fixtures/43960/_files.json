{
  "master:types/supertest/index.d.ts": "// Type definitions for SuperTest v2.0.1\n// Project: https://github.com/visionmedia/supertest\n// Definitions by: Alex Varju <https://github.com/varju>\n//                 Petteri Parkkila <https://github.com/pietu>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n// TypeScript Version: 3.0\n\nimport * as superagent from 'superagent';\n\nexport = supertest;\n\ndeclare function supertest(app: any): supertest.SuperTest<supertest.Test>;\ndeclare namespace supertest {\n    interface Response extends superagent.Response {}\n\n    interface Request extends superagent.SuperAgentRequest {}\n\n    type CallbackHandler = (err: any, res: Response) => void;\n    interface Test extends superagent.SuperAgentRequest {\n        app?: any;\n        url: string;\n        serverAddress(app: any, path: string): string;\n        expect(status: number, callback?: CallbackHandler): this;\n        expect(status: number, body: any, callback?: CallbackHandler): this;\n        expect(checker: (res: Response) => any, callback?: CallbackHandler): this;\n        expect(body: string, callback?: CallbackHandler): this;\n        expect(body: RegExp, callback?: CallbackHandler): this;\n        expect(body: Object, callback?: CallbackHandler): this;\n        expect(field: string, val: string, callback?: CallbackHandler): this;\n        expect(field: string, val: RegExp, callback?: CallbackHandler): this;\n        end(callback?: CallbackHandler): this;\n    }\n\n    interface AgentOptions {\n        ca?: any;\n    }\n    function agent(app?: any, options?: AgentOptions): SuperAgentTest;\n\n    type SuperAgentTest = SuperTest<Test> &\n        Pick<\n            Request,\n            | 'use'\n            | 'on'\n            | 'set'\n            | 'query'\n            | 'type'\n            | 'accept'\n            | 'auth'\n            | 'withCredentials'\n            | 'retry'\n            | 'ok'\n            | 'redirects'\n            | 'timeout'\n            | 'buffer'\n            | 'serialize'\n            | 'parse'\n            | 'ca'\n            | 'key'\n            | 'pfx'\n            | 'cert'\n        >;\n    interface SuperTest<T extends superagent.SuperAgentRequest> extends superagent.SuperAgent<T> {}\n}\n",
  "129f84e4492a76e7cd5af9d946c4583a60e6eb88:types/supertest/index.d.ts": "// Type definitions for SuperTest v2.0.1\n// Project: https://github.com/visionmedia/supertest\n// Definitions by: Alex Varju <https://github.com/varju>\n//                 Petteri Parkkila <https://github.com/pietu>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n// TypeScript Version: 3.0\n\nimport * as superagent from 'superagent';\n\nexport = supertest;\n\ndeclare function supertest(app: any): supertest.SuperTest<supertest.Test>;\ndeclare namespace supertest {\n    interface Response extends superagent.Response {}\n\n    interface Request extends superagent.SuperAgentRequest {}\n\n    type CallbackHandler = (err: any, res: Response) => void;\n    interface Test extends superagent.SuperAgentRequest {\n        app?: any;\n        url: string;\n        serverAddress(app: any, path: string): string;\n        expect(status: number, callback?: CallbackHandler): this;\n        expect(status: number, body: any, callback?: CallbackHandler): this;\n        expect(checker: (res: Response) => any, callback?: CallbackHandler): this;\n        expect(body: string, callback?: CallbackHandler): this;\n        expect(body: RegExp, callback?: CallbackHandler): this;\n        expect(body: Object, callback?: CallbackHandler): this;\n        expect(field: string, val: string, callback?: CallbackHandler): this;\n        expect(field: string, val: RegExp, callback?: CallbackHandler): this;\n        end(callback?: CallbackHandler): this;\n    }\n\n    interface AgentOptions {\n        ca?: any;\n    }\n    function agent(app?: any, options?: AgentOptions): SuperAgentTest;\n\n    type SuperAgentTest = SuperTest<Test> &\n        Pick<\n            Request,\n            | 'use'\n            | 'on'\n            | 'set'\n            | 'query'\n            | 'type'\n            | 'accept'\n            | 'auth'\n            | 'withCredentials'\n            | 'retry'\n            | 'ok'\n            | 'redirects'\n            | 'timeout'\n            | 'buffer'\n            | 'serialize'\n            | 'parse'\n            | 'ca'\n            | 'key'\n            | 'pfx'\n            | 'cert'\n        >;\n    interface SuperTest<T extends superagent.SuperAgentRequest> extends superagent.SuperAgent<T> {}\n}\n"
}
