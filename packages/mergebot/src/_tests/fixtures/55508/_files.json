{
  "master:types/chrome/index.d.ts": "// Type definitions for Chrome extension development\n// Project: http://developer.chrome.com/extensions/\n// Definitions by: Matthew Kimber <https://github.com/matthewkimber>\n//                 otiai10 <https://github.com/otiai10>\n//                 couven92 <https://github.com/couven92>\n//                 RReverser <https://github.com/rreverser>\n//                 sreimer15 <https://github.com/sreimer15>\n//                 MatCarlson <https://github.com/MatCarlson>\n//                 ekinsol <https://github.com/ekinsol>\n//                 Thierry RÃ©gagnon <https://github.com/tregagnon>\n//                 Brian Wilson <https://github.com/echoabstract>\n//                 Sebastiaan Pasma <https://github.com/spasma>\n//                 bdbai <https://github.com/bdbai>\n//                 pokutuna <https://github.com/pokutuna>\n//                 Jason Xian <https://github.com/JasonXian>\n//                 userTim <https://github.com/usertim>\n//                 Idan Zeierman <https://github.com/idan315>\n//                 Nicolas Rodriguez <https://github.com/nicolas377>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n// TypeScript Version: 2.4\n\n/// <reference types=\"filesystem\" />\n/// <reference path=\"./har-format/index.d.ts\" />\n\n////////////////////\n// Global object\n////////////////////\ninterface Window {\n    chrome: typeof chrome;\n}\n\n////////////////////\n// Accessibility Features\n////////////////////\n/**\n * Use the chrome.accessibilityFeatures API to manage Chrome's accessibility features. This API relies on the ChromeSetting prototype of the type API for getting and setting individual accessibility features. In order to get feature states the extension must request accessibilityFeatures.read permission. For modifying feature state, the extension needs accessibilityFeatures.modify permission. Note that accessibilityFeatures.modify does not imply accessibilityFeatures.read permission.\n * Availability: Since Chrome 37.\n * Permissions: \"accessibilityFeatures.read\"\n * Important: This API works only on Chrome OS.\n */\ndeclare namespace chrome.accessibilityFeatures {\n    /** **ChromeOS only.** Spoken feedback (text-to-speech). */\n    export var spokenFeedback: chrome.types.ChromeSetting;\n    /** **ChromeOS only.** Enlarged cursor. */\n    export var largeCursor: chrome.types.ChromeSetting;\n    /** **ChromeOS only.** Sticky modifier keys (like shift or alt). */\n    export var stickyKeys: chrome.types.ChromeSetting;\n    /** **ChromeOS only.** High contrast rendering mode. */\n    export var highContrast: chrome.types.ChromeSetting;\n    /** **ChromeOS only.** Full screen magnification. */\n    export var screenMagnifier: chrome.types.ChromeSetting;\n    /** **ChromeOS only.** Auto mouse click after mouse stops moving. */\n    export var autoclick: chrome.types.ChromeSetting;\n    /** **ChromeOS only.** Virtual on-screen keyboard. */\n    export var virtualKeyboard: chrome.types.ChromeSetting;\n    /**\n     * **ChromeOS only.**\n     * Caret highlighting.\n     * @since Chrome 51.\n     */\n    export var caretHighlight: chrome.types.ChromeSetting;\n    /**\n     * **ChromeOS only.**\n     * Cursor highlighting.\n     * @since Chrome 51.\n     */\n    export var cursorHighlight: chrome.types.ChromeSetting;\n    /**\n     * **ChromeOS only.**\n     * Focus highlighting.\n     * @since Chrome 51.\n     */\n    export var focusHighlight: chrome.types.ChromeSetting;\n    /**\n     * **ChromeOS only.**\n     * Select-to-speak.\n     * @since Chrome 51.\n     */\n    export var selectToSpeak: chrome.types.ChromeSetting;\n    /**\n     * **ChromeOS only.**\n     * Switch Access.\n     * @since Chrome 51.\n     */\n    export var switchAccess: chrome.types.ChromeSetting;\n    /**\n     * @since Chrome 42.\n     */\n    export var animationPolicy: chrome.types.ChromeSetting;\n}\n\n////////////////////\n// Action\n////////////////////\n/**\n * Use the chrome.action API to control the extension's icon in the Google Chrome toolbar.\n * Availability: Since Chrome 88. Manifest v3.\n * Manifest:  \"action\": {...}\n */\ndeclare namespace chrome.action {\n    export interface BadgeBackgroundColorDetails {\n        /** An array of four integers in the range [0,255] that make up the RGBA color of the badge. For example, opaque red is [255, 0, 0, 255]. Can also be a string with a CSS value, with opaque red being #FF0000 or #F00. */\n        color: string | ColorArray;\n        /** Optional. Limits the change to when a particular tab is selected. Automatically resets when the tab is closed.  */\n        tabId?: number | undefined;\n    }\n\n    export interface BadgeTextDetails {\n        /** Any number of characters can be passed, but only about four can fit in the space. */\n        text: string;\n        /** Optional. Limits the change to when a particular tab is selected. Automatically resets when the tab is closed.  */\n        tabId?: number | undefined;\n    }\n\n    export type ColorArray = [number, number, number, number];\n\n    export interface TitleDetails {\n        /** The string the action should display when moused over. */\n        title: string;\n        /** Optional. Limits the change to when a particular tab is selected. Automatically resets when the tab is closed.  */\n        tabId?: number | undefined;\n    }\n\n    export interface PopupDetails {\n        /** Optional. Limits the change to when a particular tab is selected. Automatically resets when the tab is closed.  */\n        tabId?: number | undefined;\n        /** The html file to show in a popup. If set to the empty string (''), no popup is shown. */\n        popup: string;\n    }\n\n    export interface BrowserClickedEvent extends chrome.events.Event<(tab: chrome.tabs.Tab) => void> {}\n\n    export interface TabIconDetails {\n        /** Optional. Either a relative image path or a dictionary {size -> relative image path} pointing to icon to be set. If the icon is specified as a dictionary, the actual image to be used is chosen depending on screen's pixel density. If the number of image pixels that fit into one screen space unit equals scale, then image with size scale * 19 will be selected. Initially only scales 1 and 2 will be supported. At least one image must be specified. Note that 'details.path = foo' is equivalent to 'details.imageData = {'19': foo}'  */\n        path?: string | { [index: number]: string } | undefined;\n        /** Optional. Limits the change to when a particular tab is selected. Automatically resets when the tab is closed.  */\n        tabId?: number | undefined;\n        /** Optional. Either an ImageData object or a dictionary {size -> ImageData} representing icon to be set. If the icon is specified as a dictionary, the actual image to be used is chosen depending on screen's pixel density. If the number of image pixels that fit into one screen space unit equals scale, then image with size scale * 19 will be selected. Initially only scales 1 and 2 will be supported. At least one image must be specified. Note that 'details.imageData = foo' is equivalent to 'details.imageData = {'19': foo}'  */\n        imageData?: ImageData | { [index: number]: ImageData } | undefined;\n    }\n\n    export interface TabDetails {\n        /** Optional. The ID of the tab to query state for. If no tab is specified, the non-tab-specific state is returned.  */\n        tabId?: number | undefined;\n    }\n\n    /**\n     * Since Chrome 88.\n     * Disables the action for a tab.\n     * @param tabId The id of the tab for which you want to modify the action.\n     * @return The `disable` method provides its result via callback or returned as a `Promise` (MV3 only). It has no parameters.\n     */\n    export function disable(tabId?: number): Promise<void>;\n\n    /**\n     * Since Chrome 88.\n     * Disables the action for a tab.\n     * @param tabId The id of the tab for which you want to modify the action.\n     * @param callback\n     */\n    export function disable(tabId?: number, callback?: () => void): void;\n\n    /**\n     * Since Chrome 88.\n     * Enables the action for a tab. By default, actions are enabled.\n     * @param tabId The id of the tab for which you want to modify the action.\n     * @return The `enable` method provides its result via callback or returned as a `Promise` (MV3 only). It has no parameters.\n     */\n    export function enable(tabId?: number): Promise<void>;\n\n    /**\n     * Since Chrome 88.\n     * Enables the action for a tab. By default, actions are enabled.\n     * @param tabId The id of the tab for which you want to modify the action.\n     * @param callback\n     */\n    export function enable(tabId?: number, callback?: () => void): void;\n\n    /**\n     * Since Chrome 88.\n     * Gets the background color of the action.\n     * @param callback The callback parameter should be a function that looks like this:\n     * (result: ColorArray) => {...}\n     */\n    export function getBadgeBackgroundColor(details: TabDetails, callback: (result: ColorArray) => void): void;\n    /**\n     * Since Chrome 88.\n     * Gets the background color of the action.\n     * @return The `getBadgeBackgroundColor` method provides its result via callback or returned as a `Promise` (MV3 only).\n     */\n    export function getBadgeBackgroundColor(details: TabDetails): Promise<ColorArray>;\n\n    /**\n     * Since Chrome 88.\n     * Gets the badge text of the action. If no tab is specified, the non-tab-specific badge text is returned.\n     * If displayActionCountAsBadgeText is enabled, a placeholder text will be returned unless the\n     * declarativeNetRequestFeedback permission is present or tab-specific badge text was provided.\n     * @param callback The callback parameter should be a function that looks like this:\n     * (result: string) => {...}\n     */\n    export function getBadgeText(details: TabDetails, callback: (result: string) => void): void;\n\n    /**\n     * Since Chrome 88.\n     * Gets the badge text of the action. If no tab is specified, the non-tab-specific badge text is returned.\n     * If displayActionCountAsBadgeText is enabled, a placeholder text will be returned unless the\n     * declarativeNetRequestFeedback permission is present or tab-specific badge text was provided.\n     * @return The `getBadgeText` method provides its result via callback or returned as a `Promise` (MV3 only).\n     */",
  "7288ad262198cd40a8457837580b67f9d1b68c7b:types/chrome/index.d.ts": "// Type definitions for Chrome extension development\n// Project: http://developer.chrome.com/extensions/\n// Definitions by: Matthew Kimber <https://github.com/matthewkimber>\n//                 otiai10 <https://github.com/otiai10>\n//                 couven92 <https://github.com/couven92>\n//                 RReverser <https://github.com/rreverser>\n//                 sreimer15 <https://github.com/sreimer15>\n//                 MatCarlson <https://github.com/MatCarlson>\n//                 ekinsol <https://github.com/ekinsol>\n//                 Thierry RÃ©gagnon <https://github.com/tregagnon>\n//                 Brian Wilson <https://github.com/echoabstract>\n//                 Sebastiaan Pasma <https://github.com/spasma>\n//                 bdbai <https://github.com/bdbai>\n//                 pokutuna <https://github.com/pokutuna>\n//                 Jason Xian <https://github.com/JasonXian>\n//                 userTim <https://github.com/usertim>\n//                 Idan Zeierman <https://github.com/idan315>\n//                 Nicolas Rodriguez <https://github.com/nicolas377>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n// TypeScript Version: 2.4\n\n/// <reference types=\"filesystem\" />\n/// <reference path=\"./har-format/index.d.ts\" />\n\n////////////////////\n// Global object\n////////////////////\ninterface Window {\n    chrome: typeof chrome;\n}\n\n////////////////////\n// Accessibility Features\n////////////////////\n/**\n * Use the chrome.accessibilityFeatures API to manage Chrome's accessibility features. This API relies on the ChromeSetting prototype of the type API for getting and setting individual accessibility features. In order to get feature states the extension must request accessibilityFeatures.read permission. For modifying feature state, the extension needs accessibilityFeatures.modify permission. Note that accessibilityFeatures.modify does not imply accessibilityFeatures.read permission.\n * Availability: Since Chrome 37.\n * Permissions: \"accessibilityFeatures.read\"\n * Important: This API works only on Chrome OS.\n */\ndeclare namespace chrome.accessibilityFeatures {\n    /** **ChromeOS only.** Spoken feedback (text-to-speech). */\n    export var spokenFeedback: chrome.types.ChromeSetting;\n    /** **ChromeOS only.** Enlarged cursor. */\n    export var largeCursor: chrome.types.ChromeSetting;\n    /** **ChromeOS only.** Sticky modifier keys (like shift or alt). */\n    export var stickyKeys: chrome.types.ChromeSetting;\n    /** **ChromeOS only.** High contrast rendering mode. */\n    export var highContrast: chrome.types.ChromeSetting;\n    /** **ChromeOS only.** Full screen magnification. */\n    export var screenMagnifier: chrome.types.ChromeSetting;\n    /** **ChromeOS only.** Auto mouse click after mouse stops moving. */\n    export var autoclick: chrome.types.ChromeSetting;\n    /** **ChromeOS only.** Virtual on-screen keyboard. */\n    export var virtualKeyboard: chrome.types.ChromeSetting;\n    /**\n     * **ChromeOS only.**\n     * Caret highlighting.\n     * @since Chrome 51.\n     */\n    export var caretHighlight: chrome.types.ChromeSetting;\n    /**\n     * **ChromeOS only.**\n     * Cursor highlighting.\n     * @since Chrome 51.\n     */\n    export var cursorHighlight: chrome.types.ChromeSetting;\n    /**\n     * **ChromeOS only.**\n     * Focus highlighting.\n     * @since Chrome 51.\n     */\n    export var focusHighlight: chrome.types.ChromeSetting;\n    /**\n     * **ChromeOS only.**\n     * Select-to-speak.\n     * @since Chrome 51.\n     */\n    export var selectToSpeak: chrome.types.ChromeSetting;\n    /**\n     * **ChromeOS only.**\n     * Switch Access.\n     * @since Chrome 51.\n     */\n    export var switchAccess: chrome.types.ChromeSetting;\n    /**\n     * @since Chrome 42.\n     */\n    export var animationPolicy: chrome.types.ChromeSetting;\n}\n\n////////////////////\n// Action\n////////////////////\n/**\n * Use the chrome.action API to control the extension's icon in the Google Chrome toolbar.\n * Availability: Since Chrome 88. Manifest v3.\n * Manifest:  \"action\": {...}\n */\ndeclare namespace chrome.action {\n    export interface BadgeBackgroundColorDetails {\n        /** An array of four integers in the range [0,255] that make up the RGBA color of the badge. For example, opaque red is [255, 0, 0, 255]. Can also be a string with a CSS value, with opaque red being #FF0000 or #F00. */\n        color: string | ColorArray;\n        /** Optional. Limits the change to when a particular tab is selected. Automatically resets when the tab is closed.  */\n        tabId?: number | undefined;\n    }\n\n    export interface BadgeTextDetails {\n        /** Any number of characters can be passed, but only about four can fit in the space. */\n        text: string;\n        /** Optional. Limits the change to when a particular tab is selected. Automatically resets when the tab is closed.  */\n        tabId?: number | undefined;\n    }\n\n    export type ColorArray = [number, number, number, number];\n\n    export interface TitleDetails {\n        /** The string the action should display when moused over. */\n        title: string;\n        /** Optional. Limits the change to when a particular tab is selected. Automatically resets when the tab is closed.  */\n        tabId?: number | undefined;\n    }\n\n    export interface PopupDetails {\n        /** Optional. Limits the change to when a particular tab is selected. Automatically resets when the tab is closed.  */\n        tabId?: number | undefined;\n        /** The html file to show in a popup. If set to the empty string (''), no popup is shown. */\n        popup: string;\n    }\n\n    export interface BrowserClickedEvent extends chrome.events.Event<(tab: chrome.tabs.Tab) => void> { }\n\n    export interface TabIconDetails {\n        /** Optional. Either a relative image path or a dictionary {size -> relative image path} pointing to icon to be set. If the icon is specified as a dictionary, the actual image to be used is chosen depending on screen's pixel density. If the number of image pixels that fit into one screen space unit equals scale, then image with size scale * 19 will be selected. Initially only scales 1 and 2 will be supported. At least one image must be specified. Note that 'details.path = foo' is equivalent to 'details.imageData = {'19': foo}'  */\n        path?: string | { [index: number]: string } | undefined;\n        /** Optional. Limits the change to when a particular tab is selected. Automatically resets when the tab is closed.  */\n        tabId?: number | undefined;\n        /** Optional. Either an ImageData object or a dictionary {size -> ImageData} representing icon to be set. If the icon is specified as a dictionary, the actual image to be used is chosen depending on screen's pixel density. If the number of image pixels that fit into one screen space unit equals scale, then image with size scale * 19 will be selected. Initially only scales 1 and 2 will be supported. At least one image must be specified. Note that 'details.imageData = foo' is equivalent to 'details.imageData = {'19': foo}'  */\n        imageData?: ImageData | { [index: number]: ImageData } | undefined;\n    }\n\n    export interface TabDetails {\n        /** Optional. The ID of the tab to query state for. If no tab is specified, the non-tab-specific state is returned.  */\n        tabId?: number | undefined;\n    }\n\n    /**\n     * Since Chrome 88.\n     * Disables the action for a tab.\n     * @param tabId The id of the tab for which you want to modify the action.\n     * @return The `disable` method provides its result via callback or returned as a `Promise` (MV3 only). It has no parameters.\n     */\n    export function disable(tabId: number): Promise<void>;\n\n    /**\n     * Since Chrome 88.\n     * Disables the action for a tab.\n     * @param tabId The id of the tab for which you want to modify the action.\n     * @param callback\n     */\n    export function disable(tabId: number, callback?: () => void): void;\n\n    /**\n     * Since Chrome 88.\n     * Enables the action for a tab. By default, actions are enabled.\n     * @param tabId The id of the tab for which you want to modify the action.\n     * @return The `enable` method provides its result via callback or returned as a `Promise` (MV3 only). It has no parameters.\n     */\n    export function enable(tabId: number): Promise<void>;\n\n    /**\n     * Since Chrome 88.\n     * Enables the action for a tab. By default, actions are enabled.\n     * @param tabId The id of the tab for which you want to modify the action.\n     * @param callback\n     */\n    export function enable(tabId: number, callback?: () => void): void;\n\n    /**\n     * Since Chrome 88.\n     * Gets the background color of the action.\n     * @param callback The callback parameter should be a function that looks like this:\n     * (result: ColorArray) => {...}\n     */\n    export function getBadgeBackgroundColor(details: TabDetails, callback: (result: ColorArray) => void): void;\n    /**\n     * Since Chrome 88.\n     * Gets the background color of the action.\n     * @return The `getBadgeBackgroundColor` method provides its result via callback or returned as a `Promise` (MV3 only).\n     */\n    export function getBadgeBackgroundColor(details: TabDetails): Promise<ColorArray>;\n\n    /**\n     * Since Chrome 88.\n     * Gets the badge text of the action. If no tab is specified, the non-tab-specific badge text is returned.\n     * If displayActionCountAsBadgeText is enabled, a placeholder text will be returned unless the\n     * declarativeNetRequestFeedback permission is present or tab-specific badge text was provided.\n     * @param callback The callback parameter should be a function that looks like this:\n     * (result: string) => {...}\n     */\n    export function getBadgeText(details: TabDetails, callback: (result: string) => void): void;\n\n    /**\n     * Since Chrome 88.\n     * Gets the badge text of the action. If no tab is specified, the non-tab-specific badge text is returned.\n     * If displayActionCountAsBadgeText is enabled, a placeholder text will be returned unless the\n     * declarativeNetRequestFeedback permission is present or tab-specific badge text was provided.\n     * @return The `getBadgeText` method provides its result via callback or returned as a `Promise` (MV3 only).\n     */\n  "
}
