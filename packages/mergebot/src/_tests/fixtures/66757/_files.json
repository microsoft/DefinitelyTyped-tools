{
  "53e0cf9afba254ecae4add3ed008bf9972db16f5:types/react-table/index.d.ts": "// Type definitions for react-table 7.7\n// Project: https://github.com/tannerlinsley/react-table\n// Definitions by: Guy Gascoigne-Piggford <https://github.com/ggascoigne>,\n//                 Rohit Garg <https://github.com/gargroh>\n//                 Jason Clark <https://github.com/riceboyler>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n// TypeScript Version: 3.5\n// reflects react-table@7.7.0\n\n// tslint:disable:no-empty-interface\n// no-empty-interface is disabled to allow easy extension with declaration merging\n\n/* eslint-disable @definitelytyped/no-unnecessary-generics */\n// no-unnecessary-generics is disabled because many of these definitions are either used in a generic\n// context or the signatures are required to match for declaration merging\n\n// The changelog for the important changes is located in the Readme.md\n\nimport {\n    ChangeEvent,\n    ComponentType,\n    CSSProperties,\n    DependencyList,\n    EffectCallback,\n    MouseEvent,\n    ReactElement,\n    ReactFragment,\n    ReactNode,\n} from 'react';\n\nexport {};\n\n/**\n * The empty definitions of below provides a base definition for the parts used by useTable, that can then be extended in the users code.\n *\n * @example\n *  export interface TableOptions<D extends object = {}}>\n *    extends\n *      UseExpandedOptions<D>,\n *      UseFiltersOptions<D> {}\n * see https://gist.github.com/ggascoigne/646e14c9d54258e40588a13aabf0102d for more details\n */\nexport interface TableOptions<D extends object> extends UseTableOptions<D> {}\n\nexport interface TableInstance<D extends object = {}>\n    extends Omit<TableOptions<D>, 'columns' | 'pageCount'>,\n        UseTableInstanceProps<D> {}\n\nexport interface TableState<D extends object = {}> {\n    hiddenColumns?: Array<IdType<D>> | undefined;\n}\n\nexport interface Hooks<D extends object = {}> extends UseTableHooks<D> {}\n\nexport interface Cell<D extends object = {}, V = any> extends UseTableCellProps<D, V> {}\n\nexport interface ColumnInterface<D extends object = {}> extends UseTableColumnOptions<D> {}\n\nexport interface ColumnInterfaceBasedOnValue<D extends object = {}, V = any> {\n    Cell?: Renderer<CellProps<D, V>> | undefined;\n}\n\nexport interface ColumnGroupInterface<D extends object> {\n    columns: Array<Column<D>>;\n}\n\nexport type ColumnGroup<D extends object = {}> =\n    & ColumnInterface<D>\n    & ColumnGroupInterface<D>\n    & (\n        | { Header: string; }\n        | ({ id: IdType<D>; } & {\n            Header: Renderer<HeaderProps<D>>;\n        })\n    )\n    // Not used, but needed for backwards compatibility\n    & { accessor?: Accessor<D> | undefined; };\n\ntype ValueOf<T> = T[keyof T];\n\n// The accessors like `foo.bar` are not supported, use functions instead\nexport type ColumnWithStrictAccessor<D extends object = {}> =\n    & ColumnInterface<D>\n    & ValueOf<{\n        [K in keyof D]: {\n            accessor: K;\n        } & ColumnInterfaceBasedOnValue<D, D[K]>;\n    }>;\n\nexport type ColumnWithLooseAccessor<D extends object = {}> =\n    & ColumnInterface<D>\n    & ColumnInterfaceBasedOnValue<D>\n    & (\n        | { Header: string }\n        | { id: IdType<D> }\n        | { accessor: keyof D extends never ? IdType<D> : never }\n    )\n    & { accessor?: (keyof D extends never ? IdType<D> | Accessor<D> : Accessor<D>) | undefined; };\n\nexport type Column<D extends object = {}> =\n    | ColumnGroup<D>\n    | ColumnWithLooseAccessor<D>\n    | ColumnWithStrictAccessor<D>;\n\nexport interface ColumnInstance<D extends object = {}>\n    extends Omit<ColumnInterface<D>, 'id'>,\n        ColumnInterfaceBasedOnValue<D>,\n        UseTableColumnProps<D> {}\n\nexport interface HeaderGroup<D extends object = {}> extends ColumnInstance<D>, UseTableHeaderGroupProps<D> {}\n\nexport interface Row<D extends object = {}> extends UseTableRowProps<D> {}\n\nexport interface TableCommonProps {\n    style?: CSSProperties | undefined;\n    className?: string | undefined;\n    role?: string | undefined;\n}\n\nexport interface TableProps extends TableCommonProps {}\n\nexport interface TableBodyProps extends TableCommonProps {}\n\nexport interface TableKeyedProps extends TableCommonProps {\n    key: React.Key;\n}\n\nexport interface TableHeaderGroupProps extends TableKeyedProps {}\n\nexport interface TableFooterGroupProps extends TableKeyedProps {}\n\nexport interface TableHeaderProps extends TableKeyedProps {}\n\nexport interface TableFooterProps extends TableKeyedProps {}\n\nexport interface TableRowProps extends TableKeyedProps {}\n\nexport interface TableCellProps extends TableKeyedProps {}\n\nexport interface TableToggleCommonProps extends TableCommonProps {\n    onChange?: ((e: ChangeEvent) => void) | undefined;\n    checked?: boolean | undefined;\n    title?: string | undefined;\n    indeterminate?: boolean | undefined;\n}\n\nexport interface MetaBase<D extends object> {\n    instance: TableInstance<D>;\n    userProps: any;\n}\n\n// inspired by ExtendState in  https://github.com/reduxjs/redux/blob/master/src/types/store.ts\nexport type Meta<D extends object, Extension = never, M = MetaBase<D>> = [Extension] extends [never]\n    ? M\n    : M & Extension;\n\n//#region useTable\nexport function useTable<D extends object = {}>(\n    options: TableOptions<D>,\n    ...plugins: Array<PluginHook<D>>\n): TableInstance<D>;\n\n/**\n * NOTE: To use custom options, use \"Interface Merging\" to add the custom options\n */\nexport type UseTableOptions<D extends object> = {\n    columns: ReadonlyArray<Column<D>>;\n    data: readonly D[];\n} & Partial<{\n    initialState: Partial<TableState<D>>;\n    stateReducer: (newState: TableState<D>, action: ActionType, previousState: TableState<D>, instance?: TableInstance<D>) => TableState<D>;\n    useControlledState: (state: TableState<D>, meta: Meta<D>) => TableState<D>;\n    defaultColumn: Partial<Column<D>>;\n    getSubRows: (originalRow: D, relativeIndex: number) => D[];\n    getRowId: (originalRow: D, relativeIndex: number, parent?: Row<D>) => string;\n    autoResetHiddenColumns: boolean;\n}>;\n\nexport type PropGetter<D extends object, Props, T extends object = never, P = Partial<Props>> =\n    | ((props: P, meta: Meta<D, T>) => P | P[])\n    | P\n    | P[];\n\nexport type TablePropGetter<D extends object> = PropGetter<D, TableProps>;\n\nexport type TableBodyPropGetter<D extends object> = PropGetter<D, TableBodyProps>;\n\nexport type HeaderPropGetter<D extends object> = PropGetter<D, TableHeaderProps, { column: HeaderGroup<D> }>;\n\nexport type FooterGroupPropGetter<D extends object> = PropGetter<D, TableFooterGroupProps, { column: HeaderGroup<D> }>;\n\nexport type HeaderGroupPropGetter<D extends object> = PropGetter<D, TableHeaderGroupProps, { column: HeaderGroup<D> }>;\n\nexport type FooterPropGetter<D extends object> = PropGetter<D, TableFooterProps, { column: HeaderGroup<D> }>;\n\nexport type RowPropGetter<D extends object> = PropGetter<D, TableRowProps, { row: Row<D> }>;\n\nexport type CellPropGetter<D extends object> = PropGetter<D, TableCellProps, { cell: Cell<D> }>;\n\nexport interface ReducerTableState<D extends object> extends TableState<D>, Record<string, any> {}\n\nexport interface UseTableHooks<D extends object> extends Record<string, any> {\n    useOptions: Array<(options: TableOptions<D>, args: TableOptions<D>) => TableOptions<D>>;\n    stateReducers: Array<\n        (\n            newState: TableState<D>,\n            action: ActionType,\n            previousState?: TableState<D>,\n            instance?: TableInstance<D>,\n        ) => ReducerTableState<D> | undefined\n    >;\n    columns: Array<(columns: Array<Column<D>>, meta: Meta<D>) => Array<Column<D>>>;\n    columnsDeps: Array<(deps: any[], meta: Meta<D>) => any[]>;\n    allColumns: Array<(allColumns: Array<ColumnInstance<D>>, meta: Meta<D>) => Array<Column<D>>>;\n    allColumnsDeps: Array<(deps: any[], meta: Meta<D>) => any[]>;\n    visibleColumns: Array<(allColumns: Array<ColumnInstance<D>>, meta: Meta<D>) => Array<Column<D>>>;\n    visibleColumnsDeps: Array<(deps: any[], meta: Meta<D>) => any[]>;\n    headerGroups: Array<(allColumns: Array<HeaderGroup<D>>, meta: Meta<D>) => Array<HeaderGroup<D>>>;\n    headerGroupsDeps: Array<(deps: any[], meta: Meta<D>) => any[]>;\n    useInstanceBeforeDimensions: Array<(instance: TableInstance<D>) => void>;\n    useInstance: Array<(instance: TableInstance<D>) => void>;\n    prepareRow: Array<(row: Row<D>, meta: Meta<D>) => void>;\n    useControlledState: Array<(state: TableState<D>, meta: Meta<D>) => TableState<D>>;\n\n    getTableProps: Array<TablePropGetter<D>>;\n    getTableBodyProps: Array<TableBodyPropGetter<D>>;\n    getHeaderGroupProps: Array<HeaderGroupPropGetter<D>>;\n    getFooterGroupProps: Array<FooterGroupPropGetter<D>>;\n    getHeaderProps: Array<HeaderPropGetter<D>>;\n    getFooterProps: Array<FooterPropGetter<D>>;\n    getRowProps: Array<RowPropGetter<D>>;\n    getCellProps: Array<CellPropGetter<D>>;\n    useFinalInstance: Array<(instance: TableInstance<D>) => void>;\n}\n\nexport interface UseTableColumnOptions<D extends object> {\n    id?: IdType<D> | undefined;\n    Header?: Renderer<HeaderProps<D>> | undefined;\n    Footer?: Renderer<FooterProps<D>> | undefined;\n    width?: number | string | undefined;\n    minWidth?: number | undefined;\n    maxWidth?: number | undefined;\n}\n\ntype UpdateHiddenColumns<D extends object> = (oldHidden: Array<IdType<D>>) => Array<IdType<D>>;\n\nexport interface TableToggleHideAllColumnProps extends TableToggleCommonProps {}\n\nexport interface UseTableInstanceProps<D extends object> {\n    state: TableState<D>;\n    plugins: Array<PluginHook<D>>;\n    dispatch: TableDispatch;\n    columns: Array<ColumnInstance<D>>;\n    allColumns: Array<ColumnInstance<D>>;\n    visibleColumns: Array<ColumnInstance<D>>;\n    headerGroups: Array<HeaderGroup<D>>;\n    footerGroups: Array<HeaderGroup<D>>;\n    headers: Array<ColumnInstance<D>>;\n    flatHeaders: Array<ColumnInstance<D>>;\n    rows: Array<Row<D>>;\n    rowsById: Record<string, Row<D>>;\n    getTableProps: (propGetter?: TablePropGetter<D>) => TableProps;\n    getTableBodyProps: (propGetter?: TableBodyPropGetter<D>) => TableBodyProps;\n    prepareRow: (row: Row<D>) => void;\n    flatRows: Array<Row<D>>;\n    totalColumnsWidth: number;\n    allColumnsHidden: boolean;\n    toggleHideColumn: (columnId: IdType<D>, value?: boolean) => void;\n    setHiddenColumns: (param: Array<IdType<D>> | UpdateHiddenColumns<D>) => vo",
  "42fb091d993517a72a32aae4e8e98271ecbf5ec3:types/react-table/index.d.ts": "// Type definitions for react-table 7.7\n// Project: https://github.com/tannerlinsley/react-table\n// Definitions by: Guy Gascoigne-Piggford <https://github.com/ggascoigne>,\n//                 Rohit Garg <https://github.com/gargroh>\n//                 Jason Clark <https://github.com/riceboyler>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n// TypeScript Version: 3.5\n// reflects react-table@7.7.0\n\n// tslint:disable:no-empty-interface\n// no-empty-interface is disabled to allow easy extension with declaration merging\n\n/* eslint-disable @definitelytyped/no-unnecessary-generics */\n// no-unnecessary-generics is disabled because many of these definitions are either used in a generic\n// context or the signatures are required to match for declaration merging\n\n// The changelog for the important changes is located in the Readme.md\n\nimport {\n    ChangeEvent,\n    ComponentType,\n    CSSProperties,\n    DependencyList,\n    EffectCallback,\n    MouseEvent,\n    ReactElement,\n    ReactFragment,\n    ReactNode,\n} from 'react';\n\nexport {};\n\n/**\n * The empty definitions of below provides a base definition for the parts used by useTable, that can then be extended in the users code.\n *\n * @example\n *  export interface TableOptions<D extends object = {}}>\n *    extends\n *      UseExpandedOptions<D>,\n *      UseFiltersOptions<D> {}\n * see https://gist.github.com/ggascoigne/646e14c9d54258e40588a13aabf0102d for more details\n */\nexport interface TableOptions<D extends object> extends UseTableOptions<D> {}\n\nexport interface TableInstance<D extends object = {}>\n    extends Omit<TableOptions<D>, 'columns' | 'pageCount'>,\n        UseTableInstanceProps<D> {}\n\nexport interface TableState<D extends object = {}> {\n    hiddenColumns?: Array<IdType<D>> | undefined;\n}\n\nexport interface Hooks<D extends object = {}> extends UseTableHooks<D> {}\n\nexport interface Cell<D extends object = {}, V = any> extends UseTableCellProps<D, V> {}\n\nexport interface ColumnInterface<D extends object = {}> extends UseTableColumnOptions<D> {}\n\nexport interface ColumnInterfaceBasedOnValue<D extends object = {}, V = any> {\n    Cell?: Renderer<CellProps<D, V>> | undefined;\n}\n\nexport interface ColumnGroupInterface<D extends object> {\n    columns: Array<Column<D>>;\n}\n\nexport type ColumnGroup<D extends object = {}> =\n    & ColumnInterface<D>\n    & ColumnGroupInterface<D>\n    & (\n        | { Header: string; }\n        | ({ id: IdType<D>; } & {\n            Header: Renderer<HeaderProps<D>>;\n        })\n    )\n    // Not used, but needed for backwards compatibility\n    & { accessor?: Accessor<D> | undefined; };\n\ntype ValueOf<T> = T[keyof T];\n\n// The accessors like `foo.bar` are not supported, use functions instead\nexport type ColumnWithStrictAccessor<D extends object = {}> =\n    & ColumnInterface<D>\n    & ValueOf<{\n        [K in keyof D]: {\n            accessor: K;\n        } & ColumnInterfaceBasedOnValue<D, D[K]>;\n    }>;\n\nexport type ColumnWithLooseAccessor<D extends object = {}> =\n    & ColumnInterface<D>\n    & ColumnInterfaceBasedOnValue<D>\n    & (\n        | { Header: string }\n        | { id: IdType<D> }\n        | { accessor: keyof D extends never ? IdType<D> : never }\n    )\n    & { accessor?: (keyof D extends never ? IdType<D> | Accessor<D> : Accessor<D>) | undefined; };\n\nexport type Column<D extends object = {}> =\n    | ColumnGroup<D>\n    | ColumnWithLooseAccessor<D>\n    | ColumnWithStrictAccessor<D>;\n\nexport interface ColumnInstance<D extends object = {}>\n    extends Omit<ColumnInterface<D>, 'id'>,\n        ColumnInterfaceBasedOnValue<D>,\n        UseTableColumnProps<D> {}\n\nexport interface HeaderGroup<D extends object = {}> extends ColumnInstance<D>, UseTableHeaderGroupProps<D> {}\n\nexport interface Row<D extends object = {}> extends UseTableRowProps<D> {}\n\nexport interface TableCommonProps {\n    style?: CSSProperties | undefined;\n    className?: string | undefined;\n    role?: string | undefined;\n}\n\nexport interface TableProps extends TableCommonProps {}\n\nexport interface TableBodyProps extends TableCommonProps {}\n\nexport interface TableKeyedProps extends TableCommonProps {\n    key: React.Key;\n}\n\nexport interface TableHeaderGroupProps extends TableKeyedProps {}\n\nexport interface TableFooterGroupProps extends TableKeyedProps {}\n\nexport interface TableHeaderProps extends TableKeyedProps {}\n\nexport interface TableFooterProps extends TableKeyedProps {}\n\nexport interface TableRowProps extends TableKeyedProps {}\n\nexport interface TableCellProps extends TableKeyedProps {}\n\nexport interface TableToggleCommonProps extends TableCommonProps {\n    onChange?: ((e: ChangeEvent) => void) | undefined;\n    checked?: boolean | undefined;\n    title?: string | undefined;\n    indeterminate?: boolean | undefined;\n}\n\nexport interface MetaBase<D extends object> {\n    instance: TableInstance<D>;\n    userProps: any;\n}\n\n// inspired by ExtendState in  https://github.com/reduxjs/redux/blob/master/src/types/store.ts\nexport type Meta<D extends object, Extension = never, M = MetaBase<D>> = [Extension] extends [never]\n    ? M\n    : M & Extension;\n\n//#region useTable\nexport function useTable<D extends object = {}>(\n    options: TableOptions<D>,\n    ...plugins: Array<PluginHook<D>>\n): TableInstance<D>;\n\n/**\n * NOTE: To use custom options, use \"Interface Merging\" to add the custom options\n */\nexport type UseTableOptions<D extends object> = {\n    columns: ReadonlyArray<Column<D>>;\n    data: readonly D[];\n} & Partial<{\n    initialState: Partial<TableState<D>>;\n    stateReducer: (newState: TableState<D>, action: ActionType, previousState: TableState<D>, instance?: TableInstance<D>) => TableState<D>;\n    useControlledState: (state: TableState<D>, meta: Meta<D>) => TableState<D>;\n    defaultColumn: Partial<Column<D>>;\n    getSubRows: (originalRow: D, relativeIndex: number) => D[];\n    getRowId: (originalRow: D, relativeIndex: number, parent?: Row<D>) => string;\n    autoResetHiddenColumns: boolean;\n}>;\n\nexport type PropGetter<D extends object, Props, T extends object = never, P = Partial<Props>> =\n    | ((props: P, meta: Meta<D, T>) => P | P[])\n    | P\n    | P[];\n\nexport type TablePropGetter<D extends object> = PropGetter<D, TableProps>;\n\nexport type TableBodyPropGetter<D extends object> = PropGetter<D, TableBodyProps>;\n\nexport type HeaderPropGetter<D extends object> = PropGetter<D, TableHeaderProps, { column: HeaderGroup<D> }>;\n\nexport type FooterGroupPropGetter<D extends object> = PropGetter<D, TableFooterGroupProps, { column: HeaderGroup<D> }>;\n\nexport type HeaderGroupPropGetter<D extends object> = PropGetter<D, TableHeaderGroupProps, { column: HeaderGroup<D> }>;\n\nexport type FooterPropGetter<D extends object> = PropGetter<D, TableFooterProps, { column: HeaderGroup<D> }>;\n\nexport type RowPropGetter<D extends object> = PropGetter<D, TableRowProps, { row: Row<D> }>;\n\nexport type CellPropGetter<D extends object> = PropGetter<D, TableCellProps, { cell: Cell<D> }>;\n\nexport interface ReducerTableState<D extends object> extends TableState<D>, Record<string, any> {}\n\nexport interface UseTableHooks<D extends object> extends Record<string, any> {\n    useOptions: Array<(options: TableOptions<D>, args: TableOptions<D>) => TableOptions<D>>;\n    stateReducers: Array<\n        (\n            newState: TableState<D>,\n            action: ActionType,\n            previousState?: TableState<D>,\n            instance?: TableInstance<D>,\n        ) => ReducerTableState<D> | undefined\n    >;\n    columns: Array<(columns: Array<Column<D>>, meta: Meta<D>) => Array<Column<D>>>;\n    columnsDeps: Array<(deps: any[], meta: Meta<D>) => any[]>;\n    allColumns: Array<(allColumns: Array<ColumnInstance<D>>, meta: Meta<D>) => Array<Column<D>>>;\n    allColumnsDeps: Array<(deps: any[], meta: Meta<D>) => any[]>;\n    visibleColumns: Array<(allColumns: Array<ColumnInstance<D>>, meta: Meta<D>) => Array<Column<D>>>;\n    visibleColumnsDeps: Array<(deps: any[], meta: Meta<D>) => any[]>;\n    headerGroups: Array<(allColumns: Array<HeaderGroup<D>>, meta: Meta<D>) => Array<HeaderGroup<D>>>;\n    headerGroupsDeps: Array<(deps: any[], meta: Meta<D>) => any[]>;\n    useInstanceBeforeDimensions: Array<(instance: TableInstance<D>) => void>;\n    useInstance: Array<(instance: TableInstance<D>) => void>;\n    prepareRow: Array<(row: Row<D>, meta: Meta<D>) => void>;\n    useControlledState: Array<(state: TableState<D>, meta: Meta<D>) => TableState<D>>;\n\n    getTableProps: Array<TablePropGetter<D>>;\n    getTableBodyProps: Array<TableBodyPropGetter<D>>;\n    getHeaderGroupProps: Array<HeaderGroupPropGetter<D>>;\n    getFooterGroupProps: Array<FooterGroupPropGetter<D>>;\n    getHeaderProps: Array<HeaderPropGetter<D>>;\n    getFooterProps: Array<FooterPropGetter<D>>;\n    getRowProps: Array<RowPropGetter<D>>;\n    getCellProps: Array<CellPropGetter<D>>;\n    useFinalInstance: Array<(instance: TableInstance<D>) => void>;\n}\n\nexport interface UseTableColumnOptions<D extends object> {\n    id?: IdType<D> | undefined;\n    Header?: Renderer<HeaderProps<D>> | undefined;\n    Footer?: Renderer<FooterProps<D>> | undefined;\n    width?: number | string | undefined;\n    minWidth?: number | undefined;\n    maxWidth?: number | undefined;\n}\n\ntype UpdateHiddenColumns<D extends object> = (oldHidden: Array<IdType<D>>) => Array<IdType<D>>;\n\nexport interface TableToggleHideAllColumnProps extends TableToggleCommonProps {}\n\nexport interface UseTableInstanceProps<D extends object> {\n    state: TableState<D>;\n    plugins: Array<PluginHook<D>>;\n    dispatch: TableDispatch;\n    columns: Array<ColumnInstance<D>>;\n    allColumns: Array<ColumnInstance<D>>;\n    visibleColumns: Array<ColumnInstance<D>>;\n    headerGroups: Array<HeaderGroup<D>>;\n    footerGroups: Array<HeaderGroup<D>>;\n    headers: Array<ColumnInstance<D>>;\n    flatHeaders: Array<ColumnInstance<D>>;\n    rows: Array<Row<D>>;\n    rowsById: Record<string, Row<D>>;\n    getTableProps: (propGetter?: TablePropGetter<D>) => TableProps;\n    getTableBodyProps: (propGetter?: TableBodyPropGetter<D>) => TableBodyProps;\n    prepareRow: (row: Row<D>) => void;\n    flatRows: Array<Row<D>>;\n    totalColumnsWidth: number;\n    allColumnsHidden: boolean;\n    toggleHideColumn: (columnId: IdType<D>, value?: boolean) => void;\n    setHiddenColumns: (param: Array<IdType<D>> | UpdateHiddenColumns<D>) => vo"
}
