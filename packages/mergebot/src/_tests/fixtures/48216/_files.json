{
  "3f689bfb9d310612cdaf7c52c7ead41d1181b52f:types/apptimize__apptimize-web-sdk/tsconfig.json": "{\n    \"compilerOptions\": {\n        \"module\": \"commonjs\",\n        \"lib\": [\n            \"es6\"\n        ],\n        \"noImplicitAny\": true,\n        \"noImplicitThis\": true,\n        \"strictNullChecks\": true,\n        \"strictFunctionTypes\": true,\n        \"baseUrl\": \"../\",\n        \"typeRoots\": [\n            \"../\"\n        ],\n        \"types\": [],\n        \"noEmit\": true,\n        \"forceConsistentCasingInFileNames\": true,\n        \"paths\": {\n            \"@apptimize/*\": [\n                \"apptimize__*\"\n            ]\n        }\n    },\n    \"files\": [\n        \"index.d.ts\",\n        \"apptimize__apptimize-web-sdk-tests.ts\"\n    ]\n}\n",
  "master:types/apptimize__apptimize-web-sdk/tsconfig.json": "{\n    \"compilerOptions\": {\n        \"module\": \"commonjs\",\n        \"lib\": [\n            \"es6\"\n        ],\n        \"noImplicitAny\": true,\n        \"noImplicitThis\": true,\n        \"strictNullChecks\": true,\n        \"strictFunctionTypes\": true,\n        \"baseUrl\": \"../\",\n        \"typeRoots\": [\n            \"../\"\n        ],\n        \"types\": [],\n        \"noEmit\": true,\n        \"forceConsistentCasingInFileNames\": true\n    },\n    \"files\": [\n        \"index.d.ts\",\n        \"apptimize__apptimize-web-sdk-tests.ts\"\n    ]\n}\n",
  "master:types/apptimize__apptimize-web-sdk/index.d.ts": "// Type definitions for @apptimize/apptimize-web-sdk 1.2\n// Project: https://www.npmjs.com/package/@apptimize/apptimize-web-sdk\n// Definitions by: Vivint Team Innovation <https://github.com/innovation-team>\n//                 Robert Baxter <https://github.com/rlbaxter>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n// TypeScript Version: 2.3\n\ninterface Dictionary<T> {\n    [key: string]: T;\n}\n\n// Named export this interface for use in setup method parameter\nexport interface ConfigAttributes {\n    log_level?: 'LOG_LEVEL_VERBOSE' | 'LOG_LEVEL_DEBUG' | 'LOG_LEVEL_INFO' | 'LOG_LEVEL_WARN' | 'LOG_LEVEL_ERROR' | 'LOG_LEVEL_NONE';\n    result_post_delay_ms?: number;\n}\n\n// Named export this interface for use in callback methods\nexport interface VariantInfo {\n    getAnonymousUserId(): string;\n    getCurrentPhase(): number;\n    getCycle(): number;\n    getExperimentId(): number;\n    getExperimentName(): string;\n    getExperimentType(): number;\n    getExperimentTypeName(): string;\n    getParticipationPhase(): number;\n    getUserHasParticipated(): boolean;\n    getUserId(): string;\n    getVariantId(): number;\n    getVariantName(): string;\n}\n\ntype simpleData = string | number | boolean;\ntype callback = () => void;\ntype variantInfoCallback = (variantInfo: VariantInfo) => void;\ntype unenrollmentCallback = (variantInfo: VariantInfo, unenrollmentReason: string) => void;\n\ninterface Apptimize {\n    flushTracking(): void;\n    getApptimizeAnonUserId(): string;\n    getApptimizeSDKPlatform(): string;\n    getApptimizeSDKVersion(): string;\n    getBool(name: string, defaultValue: boolean): boolean;\n    getBoolArray(name: string, defaultValue: boolean[]): boolean[];\n    getBoolDictionary(name: string, defaultValue: Dictionary<boolean>): Dictionary<boolean>;\n    getCustomAttributes(): Dictionary<simpleData>;\n    getCustomerUserId(): string;\n    getDouble(name: string, defaultValue: number): number;\n    getDoubleArray(name: string, defaultValue: number[]): number[];\n    getDoubleDictionary(name: string, defaultValue: Dictionary<number>): Dictionary<number>;\n    getInt(name: string, defaultValue: number): number;\n    getIntArray(name: string, defaultValue: number[]): number[];\n    getIntDictionary(name: string, defaultValue: Dictionary<number>): Dictionary<number>;\n    getString(name: string, defaultValue: string): string;\n    getStringArray(name: string, defaultValue: string[]): string[];\n    getStringDictionary(name: string, defaultValue: Dictionary<string>): Dictionary<string>;\n    getVariantInfo(): VariantInfo[];\n    isFeatureFlagEnabled(name: string): boolean;\n    runCodeBlock(codeBlockVariableName: string, callback: Dictionary<callback>): void;\n    setAppName(name: string): void;\n    setAppVersion(version: string): void;\n    setCustomAttributes(attributes: Dictionary<simpleData>): void;\n    setCustomerUserId(id: string): void;\n    setOnApptimizeInitializedCallback(callback: callback): void;\n    setOnEnrolledInExperimentCallback(callback: variantInfoCallback): void;\n    setOnMetadataUpdatedCallback(callback: callback): void;\n    setOnParticipatedInExperimentCallback(callback: variantInfoCallback): void;\n    setOnUnenrolledInExperimentCallback(callback: unenrollmentCallback): void;\n    setPilotTargetingId(id: string): void;\n    setup(appKey: string, configAttributes?: ConfigAttributes): void;\n    track(eventName: string): void;\n    trackValue(eventName: string, value: number): void;\n    updateApptimizeMetadataOnce(): void;\n}\n\ndeclare const apptimize: Apptimize;\nexport default apptimize;\n",
  "3f689bfb9d310612cdaf7c52c7ead41d1181b52f:types/apptimize__apptimize-web-sdk/index.d.ts": "// Type definitions for @apptimize/apptimize-web-sdk 1.2\n// Project: https://www.npmjs.com/package/@apptimize/apptimize-web-sdk\n// Definitions by: Vivint Team Innovation <https://github.com/innovation-team>\n//                 Robert Baxter <https://github.com/rlbaxter>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n// TypeScript Version: 2.3\n\ninterface Dictionary<T> {\n    [key: string]: T;\n}\n\n// Named export this interface for use in setup method parameter\nexport interface ConfigAttributes {\n    log_level?: 'LOG_LEVEL_VERBOSE' | 'LOG_LEVEL_DEBUG' | 'LOG_LEVEL_INFO' | 'LOG_LEVEL_WARN' | 'LOG_LEVEL_ERROR' | 'LOG_LEVEL_NONE';\n    result_post_delay_ms?: number;\n}\n\n// Named export this interface for use in callback methods\nexport interface VariantInfo {\n    getAnonymousUserId(): string;\n    getCurrentPhase(): number;\n    getCycle(): number;\n    getExperimentId(): number;\n    getExperimentName(): string;\n    getExperimentType(): number;\n    getExperimentTypeName(): string;\n    getParticipationPhase(): number;\n    getUserHasParticipated(): boolean;\n    getUserId(): string;\n    getVariantId(): number;\n    getVariantName(): string;\n}\n\ntype simpleData = string | number | boolean;\ntype callback = () => void;\ntype variantInfoCallback = (variantInfo: VariantInfo) => void;\ntype unenrollmentCallback = (variantInfo: VariantInfo, unenrollmentReason: string) => void;\n\ninterface Apptimize {\n    flushTracking(): void;\n    getApptimizeAnonUserId(): string;\n    getApptimizeSDKPlatform(): string;\n    getApptimizeSDKVersion(): string;\n    getBool(name: string, defaultValue: boolean): boolean;\n    getBoolArray(name: string, defaultValue: boolean[]): boolean[];\n    getBoolDictionary(name: string, defaultValue: Dictionary<boolean>): Dictionary<boolean>;\n    getCustomAttributes(): Dictionary<simpleData>;\n    getCustomerUserId(): string;\n    getDouble(name: string, defaultValue: number): number;\n    getDoubleArray(name: string, defaultValue: number[]): number[];\n    getDoubleDictionary(name: string, defaultValue: Dictionary<number>): Dictionary<number>;\n    getInt(name: string, defaultValue: number): number;\n    getIntArray(name: string, defaultValue: number[]): number[];\n    getIntDictionary(name: string, defaultValue: Dictionary<number>): Dictionary<number>;\n    getString(name: string, defaultValue: string): string;\n    getStringArray(name: string, defaultValue: string[]): string[];\n    getStringDictionary(name: string, defaultValue: Dictionary<string>): Dictionary<string>;\n    getVariantInfo(): VariantInfo[];\n    isFeatureFlagEnabled(name: string): boolean;\n    runCodeBlock(codeBlockVariableName: string, callback: Dictionary<callback>): void;\n    setAppName(name: string): void;\n    setAppVersion(version: string): void;\n    setCustomAttributes(attributes: Dictionary<simpleData>): void;\n    setCustomerUserId(id: string): void;\n    setOnApptimizeInitializedCallback(callback: callback): void;\n    setOnEnrolledInExperimentCallback(callback: variantInfoCallback): void;\n    setOnMetadataUpdatedCallback(callback: callback): void;\n    setOnParticipatedInExperimentCallback(callback: variantInfoCallback): void;\n    setOnUnenrolledInExperimentCallback(callback: unenrollmentCallback): void;\n    setPilotTargetingId(id: string): void;\n    setup(appKey: string, configAttributes?: ConfigAttributes): void;\n    track(eventName: string): void;\n    trackValue(eventName: string, value: number): void;\n    updateApptimizeMetadataOnce(): void;\n}\n\ndeclare const apptimize: Apptimize;\nexport default apptimize;\n"
}
