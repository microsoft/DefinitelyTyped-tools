{
  "master:types/arcgis-js-api/index.d.ts": "// Type definitions for ArcGIS API for JavaScript 4.15\n// Project: http://js.arcgis.com\n// Definitions by: Esri <https://github.com/Esri>\n//                 Bjorn Svensson <https://github.com/bsvensson>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n// TypeScript Version: 2.7\n\ntype HashMap<T> = Record<string, T>;\ntype IPromise<T> = Promise<T>;\n\ninterface IHandle {\n  remove(): void;\n}\n\ndeclare namespace __esri {\n  export class Accessor {\n    constructor(obj?: any);\n\n    destroyed: boolean;\n    initialized: boolean;\n    declaredClass: string;\n    destroy(): void;\n\n    get<T>(propertyName: string): T;\n    get(propertyName: string): any;\n    set<T>(propertyName: string, value: T): this;\n    set(props: HashMap<any>): this;\n    watch(path: string | string[], callback: WatchCallback, sync?: boolean): WatchHandle;\n\n    protected notifyChange(propertyName: string): void;\n    protected _get(propertyName: string): any;\n    protected _get<T>(propertyName: string): T;\n    protected _set<T>(propertyName: string, value: T): this;\n  }\n\n  export interface AnonymousAccessor extends Object {\n    get?<T>(propertyName: string): T;\n    get?(propertyName: string): any;\n    set?<T>(propertyName: string, value: T): this;\n    set?(props: HashMap<any>): this;\n    watch?(path: string | string[], callback: WatchCallback, sync?: boolean): WatchHandle;\n  }\n\n  export type ItemCallback<T> = (item: T, index: number) => void;\n\n  export type ItemCompareCallback<T> = (firstItem: T, secondItem: T) => number;\n\n  export type ItemMapCallback<T, R> = (item: T, index: number) => R;\n\n  export type ItemReduceCallback<T, R> = (previousValue: R, currentValue: T, index: number) => R;\n\n  export type ItemTestCallback<T> = (item: T, index: number) => boolean;\n\n  export type CollectionAfterAddEventHandler<T> = (event: CollectionAfterEvent<T>) => void;\n\n  export type CollectionAfterChangesEventHandler<T> = (event: CollectionAfterChangesEvent<T>) => void;\n\n  export type CollectionAfterRemoveEventHandler<T> = (event: CollectionAfterEvent<T>) => void;\n\n  export type CollectionChangeEventHandler<T> = (event: CollectionChangeEvent<T>) => void;\n\n  export type CollectionBeforeAddEventHandler<T> = (event: CollectionBeforeEvent<T>) => void;\n\n  export type CollectionBeforeChangesEventHandler<T> = (event: CollectionBeforeEvent<T>) => void;\n\n  export type CollectionBeforeRemoveEventHandler<T> = (event: CollectionBeforeEvent<T>) => void;\n\n  export interface CollectionAfterEvent<T = any> {\n    item: T;\n  }\n\n  export interface CollectionAfterChangesEvent<T = any> {}\n\n  export interface CollectionBeforeEvent<T = any> {\n    item: T;\n    preventDefault(): void;\n  }\n\n  export interface CollectionChangeEvent<T = any> {\n    added: T[];\n    removed: T[];\n    moved: T[];\n  }\n\n  interface Collection<T = any> extends Evented {\n    on(type: \"after-add\", listener: CollectionAfterAddEventHandler<T>): IHandle;\n    on(type: \"after-changes\", listener: CollectionAfterChangesEventHandler<T>): IHandle;\n    on(type: \"after-remove\", listener: CollectionAfterRemoveEventHandler<T>): IHandle;\n    on(type: \"before-add\", listener: CollectionBeforeAddEventHandler<T>): IHandle;\n    on(type: \"before-changes\", listener: CollectionBeforeChangesEventHandler<T>): IHandle;\n    on(type: \"before-remove\", listener: CollectionBeforeRemoveEventHandler<T>): IHandle;\n    on(type: \"change\", listener: CollectionChangeEventHandler<T>): IHandle;\n    on(type: string, listener: (event: any) => void): IHandle;\n  }\n\n  type Constructor<T> = new (...params: any[]) => T;\n\n  interface Types<T extends Base, Base = T> {\n    key: string | ((obj: any) => string);\n    base: Constructor<Base> | Function;\n    typeMap: HashMap<Constructor<T>>;\n  }\n\n  export class Collection<T = any> extends Accessor {\n    constructor(values?: any[] | Collection<any>);\n\n    readonly length: number;\n\n    add(item: T, index?: number): void;\n    addMany(items: T[] | Collection<T>, index?: number): void;\n    clone(): Collection<T>;\n    concat(value: T[] | Collection<T>): Collection<T>;\n    every(callback: ItemTestCallback<T>): boolean;\n    filter(callback: ItemTestCallback<T>): Collection<T>;\n    filter<S extends T>(callback: (item: T, index: number) => item is S): Collection<S>;\n    find(callback: ItemTestCallback<T>): T;\n    findIndex(callback: ItemTestCallback<T>): number;\n    flatten(callback: (item: T, index: number) => T[] | Collection<T>): Collection<T>;\n    flatten<U>(callback: (item: U, index: number) => U[] | Collection<U>): Collection<U>;\n    forEach(callback: ItemCallback<T>): void;\n    getItemAt(index: number): T;\n    includes(searchElement: T): boolean;\n    indexOf(searchElement: T, fromIndex?: number): number;\n    join(separator?: string): string;\n    lastIndexOf(searchElement: T, fromIndex?: number): number;\n    map<R = T>(callback: ItemMapCallback<T, R>): Collection<R>;\n    pop(): T;\n    push(item: T): number;\n    reduce<R = T>(callback: ItemReduceCallback<T, R>, initialValue?: R): R;\n    reduceRight<R = T>(callback: ItemReduceCallback<T, R>, initialValue?: R): R;\n    remove(item: T): void;\n    removeAll(): void;\n    removeAt(index: number): any;\n    removeMany(items: T[] | Collection<T>): T[];\n    reorder(item: T, index: number): T;\n    reverse(): Collection<T>;\n    shift(): T;\n    slice(begin?: number, end?: number): Collection<T>;\n    some(callback: ItemCallback<T>): boolean;\n    sort(compareFunction?: ItemCompareCallback<T>): void;\n    splice(start: number, deleteCount: number, ...items: T[]): T[];\n    toArray(): T[];\n    unshift(...items: T[]): number;\n\n    static isCollection<T = any>(value: any | Collection<T>): value is Collection<T>;\n\n    static ofType<T extends Base, Base = T>(\n      type: Constructor<T> | Types<T, Base>\n    ): new (items?: (T[] | Collection<T>) | { items?: T[] | Collection<T> }) => Collection<T>;\n  }\n\n  type CollectionProperties<T = any> = T[] | Collection<T>;\n\n  type DateProperties = number | string | Date;\n\n  export type BaseDynamicLayerLayerviewCreateErrorEventHandler = (\n    event: BaseDynamicLayerLayerviewCreateErrorEvent\n  ) => void;\n\n  export type BaseDynamicLayerLayerviewCreateEventHandler = (event: BaseDynamicLayerLayerviewCreateEvent) => void;\n\n  export type BaseDynamicLayerLayerviewDestroyEventHandler = (event: BaseDynamicLayerLayerviewDestroyEvent) => void;\n\n  export type BaseElevationLayerLayerviewCreateErrorEventHandler = (\n    event: BaseElevationLayerLayerviewCreateErrorEvent\n  ) => void;\n\n  export type BaseElevationLayerLayerviewCreateEventHandler = (event: BaseElevationLayerLayerviewCreateEvent) => void;\n\n  export type BaseElevationLayerLayerviewDestroyEventHandler = (event: BaseElevationLayerLayerviewDestroyEvent) => void;\n\n  export type BasemapLayerListTriggerActionEventHandler = (event: BasemapLayerListTriggerActionEvent) => void;\n\n  export type BasemapToggleToggleEventHandler = (event: BasemapToggleToggleEvent) => void;\n\n  export type BaseTileLayerLayerviewCreateErrorEventHandler = (event: BaseTileLayerLayerviewCreateErrorEvent) => void;\n\n  export type BaseTileLayerLayerviewCreateEventHandler = (event: BaseTileLayerLayerviewCreateEvent) => void;\n\n  export type BaseTileLayerLayerviewDestroyEventHandler = (event: BaseTileLayerLayerviewDestroyEvent) => void;\n\n  export type BingMapsLayerLayerviewCreateErrorEventHandler = (event: BingMapsLayerLayerviewCreateErrorEvent) => void;\n\n  export type BingMapsLayerLayerviewCreateEventHandler = (event: BingMapsLayerLayerviewCreateEvent) => void;\n\n  export type BingMapsLayerLayerviewDestroyEventHandler = (event: BingMapsLayerLayerviewDestroyEvent) => void;\n\n  export type BookmarksSelectBookmarkEventHandler = (event: BookmarksSelectBookmarkEvent) => void;\n\n  export type BuildingSceneLayerLayerviewCreateErrorEventHandler = (\n    event: BuildingSceneLayerLayerviewCreateErrorEvent\n  ) => void;\n\n  export type BuildingSceneLayerLayerviewCreateEventHandler = (event: BuildingSceneLayerLayerviewCreateEvent) => void;\n\n  export type BuildingSceneLayerLayerviewDestroyEventHandler = (event: BuildingSceneLayerLayerviewDestroyEvent) => void;\n\n  export type ClassedColorSliderMaxChangeEventHandler = (event: ClassedColorSliderMaxChangeEvent) => void;\n\n  export type ClassedColorSliderMinChangeEventHandler = (event: ClassedColorSliderMinChangeEvent) => void;\n\n  export type ClassedColorSliderThumbChangeEventHandler = (event: ClassedColorSliderThumbChangeEvent) => void;\n\n  export type ClassedColorSliderThumbDragEventHandler = (event: ClassedColorSliderThumbDragEvent) => void;\n\n  export type ClassedColorSliderViewModelMaxChangeEventHandler = (\n    event: ClassedColorSliderViewModelMaxChangeEvent\n  ) => void;\n\n  export type ClassedColorSliderViewModelMinChangeEventHandler = (\n    event: ClassedColorSliderViewModelMinChangeEvent\n  ) => void;\n\n  export type ClassedSizeSliderMaxChangeEventHandler = (event: ClassedSizeSliderMaxChangeEvent) => void;\n\n  export type ClassedSizeSliderMinChangeEventHandler = (event: ClassedSizeSliderMinChangeEvent) => void;\n\n  export type ClassedSizeSliderThumbChangeEventHandler = (event: ClassedSizeSliderThumbChangeEvent) => void;\n\n  export type ClassedSizeSliderThumbDragEventHandler = (event: ClassedSizeSliderThumbDragEvent) => void;\n\n  export type ClassedSizeSliderViewModelMaxChangeEventHandler = (\n    event: ClassedSizeSliderViewModelMaxChangeEvent\n  ) => void;\n\n  export type ClassedSizeSliderViewModelMinChangeEventHandler = (\n    event: ClassedSizeSliderViewModelMinChangeEvent\n  ) => void;\n\n  export type ColorSizeSliderMaxChangeEventHandler = (event: ColorSizeSliderMaxChangeEvent) => void;\n\n  export type ColorSizeSliderMinChangeEventHandler = (event: ColorSizeSliderMinChangeEvent) => void;\n\n  export type ColorSizeSliderThumbChangeEventHandler = (event: ColorSizeSliderThumbChangeEvent) => void;\n\n  export type ColorSizeSliderThumbDragEventHandler = (event: ColorSizeSliderThumbDragEvent) => void;\n\n  export type ColorSizeSliderViewModelMaxChangeEventHandler = (event: ColorSizeSliderViewModelMaxChangeEvent) => void;\n\n  export type ColorSizeSliderViewModelMinChangeEventHandler = (event: ColorSizeSliderViewModelMinChangeEvent) => void;\n\n  export type ColorSliderMaxChangeEventHandler = (event: ColorSliderMaxChangeEvent) => void;\n\n  export type ColorSliderMinChangeEventHandle",
  "933d8d81859cea3cb2df640bd099ef80bee3d691:types/arcgis-js-api/index.d.ts": "// Type definitions for ArcGIS API for JavaScript 4.15\n// Project: http://js.arcgis.com\n// Definitions by: Esri <https://github.com/Esri>\n//                 Bjorn Svensson <https://github.com/bsvensson>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n// TypeScript Version: 2.7\n\ntype HashMap<T> = Record<string, T>;\ntype IPromise<T> = Promise<T>;\n\ninterface IHandle {\n  remove(): void;\n}\n\ndeclare namespace __esri {\n  export class Accessor {\n    constructor(obj?: any);\n\n    destroyed: boolean;\n    initialized: boolean;\n    declaredClass: string;\n    destroy(): void;\n\n    get<T>(propertyName: string): T;\n    get(propertyName: string): any;\n    set<T>(propertyName: string, value: T): this;\n    set(props: HashMap<any>): this;\n    watch(path: string | string[], callback: WatchCallback, sync?: boolean): WatchHandle;\n\n    protected notifyChange(propertyName: string): void;\n    protected _get(propertyName: string): any;\n    protected _get<T>(propertyName: string): T;\n    protected _set<T>(propertyName: string, value: T): this;\n  }\n\n  export interface AnonymousAccessor extends Object {\n    get?<T>(propertyName: string): T;\n    get?(propertyName: string): any;\n    set?<T>(propertyName: string, value: T): this;\n    set?(props: HashMap<any>): this;\n    watch?(path: string | string[], callback: WatchCallback, sync?: boolean): WatchHandle;\n  }\n\n  export type ItemCallback<T> = (item: T, index: number) => void;\n\n  export type ItemCompareCallback<T> = (firstItem: T, secondItem: T) => number;\n\n  export type ItemMapCallback<T, R> = (item: T, index: number) => R;\n\n  export type ItemReduceCallback<T, R> = (previousValue: R, currentValue: T, index: number) => R;\n\n  export type ItemTestCallback<T> = (item: T, index: number) => boolean;\n\n  export type CollectionAfterAddEventHandler<T> = (event: CollectionAfterEvent<T>) => void;\n\n  export type CollectionAfterChangesEventHandler<T> = (event: CollectionAfterChangesEvent<T>) => void;\n\n  export type CollectionAfterRemoveEventHandler<T> = (event: CollectionAfterEvent<T>) => void;\n\n  export type CollectionChangeEventHandler<T> = (event: CollectionChangeEvent<T>) => void;\n\n  export type CollectionBeforeAddEventHandler<T> = (event: CollectionBeforeEvent<T>) => void;\n\n  export type CollectionBeforeChangesEventHandler<T> = (event: CollectionBeforeEvent<T>) => void;\n\n  export type CollectionBeforeRemoveEventHandler<T> = (event: CollectionBeforeEvent<T>) => void;\n\n  export interface CollectionAfterEvent<T = any> {\n    item: T;\n  }\n\n  export interface CollectionAfterChangesEvent<T = any> {}\n\n  export interface CollectionBeforeEvent<T = any> {\n    item: T;\n    preventDefault(): void;\n  }\n\n  export interface CollectionChangeEvent<T = any> {\n    added: T[];\n    removed: T[];\n    moved: T[];\n  }\n\n  interface Collection<T = any> extends Evented {\n    on(type: \"after-add\", listener: CollectionAfterAddEventHandler<T>): IHandle;\n    on(type: \"after-changes\", listener: CollectionAfterChangesEventHandler<T>): IHandle;\n    on(type: \"after-remove\", listener: CollectionAfterRemoveEventHandler<T>): IHandle;\n    on(type: \"before-add\", listener: CollectionBeforeAddEventHandler<T>): IHandle;\n    on(type: \"before-changes\", listener: CollectionBeforeChangesEventHandler<T>): IHandle;\n    on(type: \"before-remove\", listener: CollectionBeforeRemoveEventHandler<T>): IHandle;\n    on(type: \"change\", listener: CollectionChangeEventHandler<T>): IHandle;\n    on(type: string, listener: (event: any) => void): IHandle;\n  }\n\n  type Constructor<T> = new (...params: any[]) => T;\n\n  interface Types<T extends Base, Base = T> {\n    key: string | ((obj: any) => string);\n    base: Constructor<Base> | Function;\n    typeMap: HashMap<Constructor<T>>;\n  }\n\n  export class Collection<T = any> extends Accessor {\n    constructor(values?: any[] | Collection<any>);\n\n    readonly length: number;\n\n    add(item: T, index?: number): void;\n    addMany(items: T[] | Collection<T>, index?: number): void;\n    clone(): Collection<T>;\n    concat(value: T[] | Collection<T>): Collection<T>;\n    every(callback: ItemTestCallback<T>): boolean;\n    filter(callback: ItemTestCallback<T>): Collection<T>;\n    filter<S extends T>(callback: (item: T, index: number) => item is S): Collection<S>;\n    find(callback: ItemTestCallback<T>): T;\n    findIndex(callback: ItemTestCallback<T>): number;\n    flatten(callback: (item: T, index: number) => T[] | Collection<T>): Collection<T>;\n    flatten<U>(callback: (item: U, index: number) => U[] | Collection<U>): Collection<U>;\n    forEach(callback: ItemCallback<T>): void;\n    getItemAt(index: number): T;\n    includes(searchElement: T): boolean;\n    indexOf(searchElement: T, fromIndex?: number): number;\n    join(separator?: string): string;\n    lastIndexOf(searchElement: T, fromIndex?: number): number;\n    map<R = T>(callback: ItemMapCallback<T, R>): Collection<R>;\n    pop(): T;\n    push(item: T): number;\n    reduce<R = T>(callback: ItemReduceCallback<T, R>, initialValue?: R): R;\n    reduceRight<R = T>(callback: ItemReduceCallback<T, R>, initialValue?: R): R;\n    remove(item: T): void;\n    removeAll(): void;\n    removeAt(index: number): any;\n    removeMany(items: T[] | Collection<T>): T[];\n    reorder(item: T, index: number): T;\n    reverse(): Collection<T>;\n    shift(): T;\n    slice(begin?: number, end?: number): Collection<T>;\n    some(callback: ItemCallback<T>): boolean;\n    sort(compareFunction?: ItemCompareCallback<T>): void;\n    splice(start: number, deleteCount: number, ...items: T[]): T[];\n    toArray(): T[];\n    unshift(...items: T[]): number;\n\n    static isCollection<T = any>(value: any | Collection<T>): value is Collection<T>;\n\n    static ofType<T extends Base, Base = T>(\n      type: Constructor<T> | Types<T, Base>\n    ): new (items?: (T[] | Collection<T>) | { items?: T[] | Collection<T> }) => Collection<T>;\n  }\n\n  type CollectionProperties<T = any> = T[] | Collection<T>;\n\n  type DateProperties = number | string | Date;\n\n  export type BaseDynamicLayerLayerviewCreateErrorEventHandler = (\n    event: BaseDynamicLayerLayerviewCreateErrorEvent\n  ) => void;\n\n  export type BaseDynamicLayerLayerviewCreateEventHandler = (event: BaseDynamicLayerLayerviewCreateEvent) => void;\n\n  export type BaseDynamicLayerLayerviewDestroyEventHandler = (event: BaseDynamicLayerLayerviewDestroyEvent) => void;\n\n  export type BaseElevationLayerLayerviewCreateErrorEventHandler = (\n    event: BaseElevationLayerLayerviewCreateErrorEvent\n  ) => void;\n\n  export type BaseElevationLayerLayerviewCreateEventHandler = (event: BaseElevationLayerLayerviewCreateEvent) => void;\n\n  export type BaseElevationLayerLayerviewDestroyEventHandler = (event: BaseElevationLayerLayerviewDestroyEvent) => void;\n\n  export type BasemapLayerListTriggerActionEventHandler = (event: BasemapLayerListTriggerActionEvent) => void;\n\n  export type BasemapToggleToggleEventHandler = (event: BasemapToggleToggleEvent) => void;\n\n  export type BaseTileLayerLayerviewCreateErrorEventHandler = (event: BaseTileLayerLayerviewCreateErrorEvent) => void;\n\n  export type BaseTileLayerLayerviewCreateEventHandler = (event: BaseTileLayerLayerviewCreateEvent) => void;\n\n  export type BaseTileLayerLayerviewDestroyEventHandler = (event: BaseTileLayerLayerviewDestroyEvent) => void;\n\n  export type BingMapsLayerLayerviewCreateErrorEventHandler = (event: BingMapsLayerLayerviewCreateErrorEvent) => void;\n\n  export type BingMapsLayerLayerviewCreateEventHandler = (event: BingMapsLayerLayerviewCreateEvent) => void;\n\n  export type BingMapsLayerLayerviewDestroyEventHandler = (event: BingMapsLayerLayerviewDestroyEvent) => void;\n\n  export type BookmarksSelectBookmarkEventHandler = (event: BookmarksSelectBookmarkEvent) => void;\n\n  export type BuildingSceneLayerLayerviewCreateErrorEventHandler = (\n    event: BuildingSceneLayerLayerviewCreateErrorEvent\n  ) => void;\n\n  export type BuildingSceneLayerLayerviewCreateEventHandler = (event: BuildingSceneLayerLayerviewCreateEvent) => void;\n\n  export type BuildingSceneLayerLayerviewDestroyEventHandler = (event: BuildingSceneLayerLayerviewDestroyEvent) => void;\n\n  export type ClassedColorSliderMaxChangeEventHandler = (event: ClassedColorSliderMaxChangeEvent) => void;\n\n  export type ClassedColorSliderMinChangeEventHandler = (event: ClassedColorSliderMinChangeEvent) => void;\n\n  export type ClassedColorSliderThumbChangeEventHandler = (event: ClassedColorSliderThumbChangeEvent) => void;\n\n  export type ClassedColorSliderThumbDragEventHandler = (event: ClassedColorSliderThumbDragEvent) => void;\n\n  export type ClassedColorSliderViewModelMaxChangeEventHandler = (\n    event: ClassedColorSliderViewModelMaxChangeEvent\n  ) => void;\n\n  export type ClassedColorSliderViewModelMinChangeEventHandler = (\n    event: ClassedColorSliderViewModelMinChangeEvent\n  ) => void;\n\n  export type ClassedSizeSliderMaxChangeEventHandler = (event: ClassedSizeSliderMaxChangeEvent) => void;\n\n  export type ClassedSizeSliderMinChangeEventHandler = (event: ClassedSizeSliderMinChangeEvent) => void;\n\n  export type ClassedSizeSliderThumbChangeEventHandler = (event: ClassedSizeSliderThumbChangeEvent) => void;\n\n  export type ClassedSizeSliderThumbDragEventHandler = (event: ClassedSizeSliderThumbDragEvent) => void;\n\n  export type ClassedSizeSliderViewModelMaxChangeEventHandler = (\n    event: ClassedSizeSliderViewModelMaxChangeEvent\n  ) => void;\n\n  export type ClassedSizeSliderViewModelMinChangeEventHandler = (\n    event: ClassedSizeSliderViewModelMinChangeEvent\n  ) => void;\n\n  export type ColorSizeSliderMaxChangeEventHandler = (event: ColorSizeSliderMaxChangeEvent) => void;\n\n  export type ColorSizeSliderMinChangeEventHandler = (event: ColorSizeSliderMinChangeEvent) => void;\n\n  export type ColorSizeSliderThumbChangeEventHandler = (event: ColorSizeSliderThumbChangeEvent) => void;\n\n  export type ColorSizeSliderThumbDragEventHandler = (event: ColorSizeSliderThumbDragEvent) => void;\n\n  export type ColorSizeSliderViewModelMaxChangeEventHandler = (event: ColorSizeSliderViewModelMaxChangeEvent) => void;\n\n  export type ColorSizeSliderViewModelMinChangeEventHandler = (event: ColorSizeSliderViewModelMinChangeEvent) => void;\n\n  export type ColorSliderMaxChangeEventHandler = (event: ColorSliderMaxChangeEvent) => void;\n\n  export type ColorSliderMinChangeEventHandle"
}
