{
  "master:types/react-d3-graph/index.d.ts": "// Type definitions for react-d3-graph 2.3\n// Project: https://github.com/danielcaldas/react-d3-graph#readme\n// Definitions by: Harry Goode <https://github.com/hrngoode>\n//                 Adina Todoran <https://github.com/adina-todoran>\n//                 Robin Leclerc <https://github.com/BreadAndRoses95>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n\nimport { Component, MouseEvent } from 'react';\n\nexport type NodeLabelProperty<N extends GraphNode> = ((node: N) => string) | keyof N;\nexport type LinkLabelProperty<L extends GraphLink> = ((node: L) => string) | keyof L;\n\nexport type NodeWithExtraParameters = GraphNode & { [key: string]: string };\n\nexport interface NodeLevelNodeConfiguration {\n    color: string;\n    fontColor: string;\n    opacity: number;\n    renderLabel: boolean;\n    size: number;\n    strokeColor: string;\n    strokeWidth: number;\n    svg: string;\n    symbolType: string;\n    viewGenerator: (node: NodeWithExtraParameters) => any;\n    labelProperty: NodeLabelProperty<NodeWithExtraParameters>;\n}\n\nexport interface GraphLevelNodeConfiguration<N extends GraphNode> {\n    color: string;\n    fontColor: string;\n    opacity: number;\n    renderLabel: boolean;\n    size: number;\n    strokeColor: string;\n    strokeWidth: number;\n    svg: string;\n    symbolType: string;\n    fontSize: number;\n    fontWeight: string;\n    highlightColor: string;\n    highlightFontSize: number;\n    highlightFontWeight: string;\n    highlightStrokeColor: 'SAME' | string;\n    highlightStrokeWidth: 'SAME' | number;\n    mouseCursor: string;\n    viewGenerator: (node: N) => any;\n    labelProperty: NodeLabelProperty<N>;\n}\n\nexport interface GraphNode extends Partial<NodeLevelNodeConfiguration> {\n    id: string;\n}\n\nexport interface LinkLevelLinkConfiguration {\n    color: string;\n    fontColor: string;\n    opacity: number;\n    strokeWidth: number;\n    markerWidth: number;\n}\n\nexport interface GraphLevelLinkConfiguration<L extends GraphLink> extends LinkLevelLinkConfiguration {\n    fontSize: number;\n    fontWeight: string;\n    highlightColor: string;\n    highlightFontSize: number;\n    highlightFontWeight: string;\n    labelProperty: LinkLabelProperty<L>;\n    renderLabel: boolean;\n    semanticStrokeWidth: boolean;\n    markerHeight: number;\n    type: string;\n    mouseCursor: string;\n}\n\nexport interface GraphLink extends Partial<LinkLevelLinkConfiguration> {\n    source: string;\n    target: string;\n}\n\nexport interface GraphConfiguration<N extends GraphNode, L extends GraphLink> {\n    node: Partial<GraphLevelNodeConfiguration<N>>;\n    link: Partial<GraphLevelLinkConfiguration<L>>;\n    automaticRearrangeAfterDropNode: boolean;\n    collapsible: boolean;\n    directed: boolean;\n    focusZoom: number;\n    focusAnimationDuration: number;\n    height: number;\n    nodeHighlightBehavior: boolean;\n    linkHighlightBehavior: boolean;\n    highlightDegree: number;\n    highlightOpacity: number;\n    maxZoom: number;\n    minZoom: number;\n    panAndZoom: boolean;\n    staticGraph: boolean;\n    staticGraphWithDragAndDrop: boolean;\n    width: number;\n    d3: {\n        alphaTarget: number;\n        gravity: number;\n        linkLength: number;\n        linkStrength: number;\n        disableLinkForce: boolean;\n    };\n}\n\nexport interface GraphData<N extends GraphNode, L extends GraphLink> {\n    nodes: N[];\n    links: L[];\n    focusedNodeId?: string;\n}\n\nexport interface GraphEventCallbacks {\n    onClickGraph: (event: MouseEvent) => void;\n    onClickNode: (nodeId: string) => void;\n    onDoubleClickNode: (nodeId: string) => void;\n    onRightClickNode: (event: MouseEvent, nodeId: string) => void;\n    onMouseOverNode: (nodeId: string) => void;\n    onMouseOutNode: (nodeId: string) => void;\n    onClickLink: (source: string, target: string) => void;\n    onRightClickLink: (event: MouseEvent, source: string, target: string) => void;\n    onMouseOverLink: (source: string, target: string) => void;\n    onMouseOutLink: (source: string, target: string) => void;\n    onNodePositionChange: (nodeId: string, x: number, y: number) => void;\n}\n\nexport interface GraphProps<N extends GraphNode, L extends GraphLink> extends Partial<GraphEventCallbacks> {\n    id: string;\n    data?: GraphData<N, L>;\n    config?: Partial<GraphConfiguration<N, L>>;\n}\n\nexport class Graph<N extends GraphNode, L extends GraphLink> extends Component<GraphProps<N, L>, any> {\n    constructor(props: GraphProps<N, L>, ...args: any[]);\n\n    UNSAFE_componentWillReceiveProps(nextProps: any): any;\n\n    componentDidMount(): void;\n\n    componentDidUpdate(): void;\n\n    componentWillUnmount(): void;\n\n    render(): any;\n}\n\nexport class Link extends Component<any, any> {\n    constructor(...args: any[]);\n\n    render(): any;\n}\n\nexport class Node extends Component<any, any> {\n    constructor(...args: any[]);\n\n    render(): any;\n}\n",
  "3e3524f41de19cd97d5c32a531eab3f0e9206f75:types/react-d3-graph/index.d.ts": "// Type definitions for react-d3-graph 2.3\n// Project: https://github.com/danielcaldas/react-d3-graph#readme\n// Definitions by: Harry Goode <https://github.com/hrngoode>\n//                 Adina Todoran <https://github.com/adina-todoran>\n//                 Robin Leclerc <https://github.com/BreadAndRoses95>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n\nimport { Component, MouseEvent } from 'react';\n\nexport type NodeLabelProperty<N extends GraphNode> = ((node: N) => string) | keyof N;\nexport type LinkLabelProperty<L extends GraphLink> = ((node: L) => string) | keyof L;\n\nexport type NodeWithExtraParameters = GraphNode & { [key: string]: string };\n\nexport interface NodeLevelNodeConfiguration {\n    color: string;\n    fontColor: string;\n    opacity: number;\n    renderLabel: boolean;\n    size: number;\n    strokeColor: string;\n    strokeWidth: number;\n    svg: string;\n    symbolType: string;\n    viewGenerator: (node: NodeWithExtraParameters) => any;\n    labelProperty: NodeLabelProperty<NodeWithExtraParameters>;\n}\n\nexport interface GraphLevelNodeConfiguration<N extends GraphNode> {\n    color: string;\n    fontColor: string;\n    opacity: number;\n    renderLabel: boolean;\n    size: number;\n    strokeColor: string;\n    strokeWidth: number;\n    svg: string;\n    symbolType: string;\n    fontSize: number;\n    fontWeight: string;\n    highlightColor: string;\n    highlightFontSize: number;\n    highlightFontWeight: string;\n    highlightStrokeColor: 'SAME' | string;\n    highlightStrokeWidth: 'SAME' | number;\n    mouseCursor: string;\n    viewGenerator: (node: N) => any;\n    labelProperty: NodeLabelProperty<N>;\n}\n\nexport interface GraphNode extends Partial<NodeLevelNodeConfiguration> {\n    id: string;\n}\n\nexport interface LinkLevelLinkConfiguration {\n    color: string;\n    fontColor: string;\n    opacity: number;\n    strokeWidth: number;\n    markerWidth: number;\n}\n\nexport interface GraphLevelLinkConfiguration<L extends GraphLink> extends LinkLevelLinkConfiguration {\n    fontSize: number;\n    fontWeight: string;\n    highlightColor: string;\n    highlightFontSize: number;\n    highlightFontWeight: string;\n    labelProperty: LinkLabelProperty<L>;\n    renderLabel: boolean;\n    semanticStrokeWidth: boolean;\n    markerHeight: number;\n    type: string;\n    mouseCursor: string;\n}\n\nexport interface GraphLink extends Partial<LinkLevelLinkConfiguration> {\n    source: string;\n    target: string;\n}\n\nexport interface GraphConfiguration<N extends GraphNode, L extends GraphLink> {\n    node: Partial<GraphLevelNodeConfiguration<N>>;\n    link: Partial<GraphLevelLinkConfiguration<L>>;\n    automaticRearrangeAfterDropNode: boolean;\n    collapsible: boolean;\n    directed: boolean;\n    focusZoom: number;\n    focusAnimationDuration: number;\n    height: number;\n    nodeHighlightBehavior: boolean;\n    linkHighlightBehavior: boolean;\n    highlightDegree: number;\n    highlightOpacity: number;\n    maxZoom: number;\n    minZoom: number;\n    panAndZoom: boolean;\n    staticGraph: boolean;\n    staticGraphWithDragAndDrop: boolean;\n    width: number;\n    d3: {\n        alphaTarget: number;\n        gravity: number;\n        linkLength: number;\n        linkStrength: number;\n        disableLinkForce: boolean;\n    };\n}\n\nexport interface GraphData<N extends GraphNode, L extends GraphLink> {\n    nodes: N[];\n    links: L[];\n    focusedNodeId?: string;\n}\n\nexport interface GraphEventCallbacks {\n    onClickGraph: (event: MouseEvent) => void;\n    onClickNode: (nodeId: string) => void;\n    onDoubleClickNode: (nodeId: string) => void;\n    onRightClickNode: (event: MouseEvent, nodeId: string) => void;\n    onMouseOverNode: (nodeId: string) => void;\n    onMouseOutNode: (nodeId: string) => void;\n    onClickLink: (source: string, target: string) => void;\n    onRightClickLink: (event: MouseEvent, source: string, target: string) => void;\n    onMouseOverLink: (source: string, target: string) => void;\n    onMouseOutLink: (source: string, target: string) => void;\n    onNodePositionChange: (nodeId: string, x: number, y: number) => void;\n}\n\nexport interface GraphProps<N extends GraphNode, L extends GraphLink> extends Partial<GraphEventCallbacks> {\n    id: string;\n    data?: GraphData<N, L>;\n    config?: Partial<GraphConfiguration<N, L>>;\n}\n\nexport class Graph<N extends GraphNode, L extends GraphLink> extends Component<GraphProps<N, L>, any> {\n    constructor(props: GraphProps<N, L>, ...args: any[]);\n\n    UNSAFE_componentWillReceiveProps(nextProps: any): any;\n\n    componentDidMount(): void;\n\n    componentDidUpdate(): void;\n\n    componentWillUnmount(): void;\n\n    render(): any;\n}\n\nexport class Link extends Component<any, any> {\n    constructor(...args: any[]);\n\n    render(): any;\n}\n\nexport class Node extends Component<any, any> {\n    constructor(...args: any[]);\n\n    render(): any;\n}\n"
}
