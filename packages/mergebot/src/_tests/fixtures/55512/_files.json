{
  "master:types/react-datepicker/index.d.ts": "// Type definitions for react-datepicker 4.1\n// Project: https://github.com/Hacker0x01/react-datepicker\n// Definitions by: Rajab Shakirov <https://github.com/radziksh>,\n//                 Andrey Balokha <https://github.com/andrewBalekha>,\n//                 Greg Smith <https://github.com/smrq>,\n//                 Roy Xue <https://github.com/royxue>\n//                 Koala Human <https://github.com/KoalaHuman>\n//                 Justin Grant <https://github.com/justingrant>\n//                 Jake Boone <https://github.com/jakeboone02>\n//                 Roman Nuritdinov <https://github.com/Ky6uk>\n//                 Avi Klaiman <https://github.com/aviklai>\n//                 Naoki Sekiguchi <https://github.com/seckie>\n//                 tu4mo <https://github.com/tu4mo>\n//                 Kerry Gougeon <https://github.com/kerry-g>\n//                 Shiftr Tech SAS <https://github.com/ShiftrTechSAS>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n// Minimum TypeScript Version: 3.8\n\nimport * as React from 'react';\nimport * as Popper from '@popperjs/core';\nimport { Locale } from 'date-fns';\nimport { Modifier, StrictModifierNames } from 'react-popper';\n\nexport function registerLocale(localeName: string, localeData: {}): void;\nexport function setDefaultLocale(localeName: string): void;\nexport function getDefaultLocale(): string;\nexport function CalendarContainer(props: {\n    className?: string | undefined;\n    children?: React.ReactNode | undefined;\n    showPopperArrow?: boolean | undefined;\n    arrowProps?: { [propName: string]: any } | undefined;\n}): React.ReactElement;\n\ninterface HighlightDates {\n    [className: string]: Date[];\n}\n\nexport interface ReactDatePickerProps<CustomModifierNames extends string = never> {\n    adjustDateOnChange?: boolean | undefined;\n    allowSameDay?: boolean | undefined;\n    ariaDescribedBy?: string | undefined;\n    ariaInvalid?: string | undefined;\n    ariaLabelClose?: string | undefined;\n    ariaLabelledBy?: string | undefined;\n    ariaRequired?: string | undefined;\n    autoComplete?: string | undefined;\n    autoFocus?: boolean | undefined;\n    calendarClassName?: string | undefined;\n    calendarContainer?(props: { children: React.ReactNode[] }): React.ReactNode;\n    calendarStartDay?: number | undefined;\n    children?: React.ReactNode | undefined;\n    chooseDayAriaLabelPrefix?: string | undefined;\n    className?: string | undefined;\n    clearButtonClassName?: string | undefined;\n    clearButtonTitle?: string | undefined;\n    closeOnScroll?: boolean | ((e: Event) => boolean) | undefined;\n    customInput?: React.ReactNode | undefined;\n    customInputRef?: string | undefined;\n    customTimeInput?: React.ReactNode | undefined;\n    dateFormat?: string | string[] | undefined;\n    dateFormatCalendar?: string | undefined;\n    dayClassName?(date: Date): string | null;\n    weekDayClassName?(date: Date): string | null;\n    monthClassName?(date: Date): string | null;\n    timeClassName?(date: Date): string | null;\n    disabledDayAriaLabelPrefix?: string | undefined;\n    disabled?: boolean | undefined;\n    disabledKeyboardNavigation?: boolean | undefined;\n    dropdownMode?: 'scroll' | 'select' | undefined;\n    endDate?: Date | null | undefined;\n    excludeDates?: Date[] | undefined;\n    excludeTimes?: Date[] | undefined;\n    filterDate?(date: Date): boolean;\n    filterTime?(date: Date): boolean;\n    fixedHeight?: boolean | undefined;\n    forceShowMonthNavigation?: boolean | undefined;\n    formatWeekDay?(formattedDate: string): React.ReactNode;\n    formatWeekNumber?(date: Date): string | number;\n    highlightDates?: Array<HighlightDates | Date> | undefined;\n    id?: string | undefined;\n    includeDates?: Date[] | undefined;\n    includeTimes?: Date[] | undefined;\n    injectTimes?: Date[] | undefined;\n    inline?: boolean | undefined;\n    focusSelectedMonth?: boolean | undefined;\n    isClearable?: boolean | undefined;\n    locale?: string | Locale | undefined;\n    maxDate?: Date | null | undefined;\n    maxTime?: Date | undefined;\n    minDate?: Date | null | undefined;\n    minTime?: Date | undefined;\n    monthsShown?: number | undefined;\n    name?: string | undefined;\n    nextMonthButtonLabel?: string | React.ReactNode | undefined;\n    nextYearButtonLabel?: string | undefined;\n    onBlur?(event: React.FocusEvent<HTMLInputElement>): void;\n    onCalendarClose?(): void;\n    onCalendarOpen?(): void;\n    onChange(\n        date: Date | [Date | null, Date | null] | /* for selectsRange */ null,\n        event: React.SyntheticEvent<any> | undefined,\n    ): void;\n    onChangeRaw?(event: React.FocusEvent<HTMLInputElement>): void;\n    onClickOutside?(event: React.MouseEvent<HTMLDivElement>): void;\n    onDayMouseEnter?: ((date: Date) => void) | undefined;\n    onFocus?(event: React.FocusEvent<HTMLInputElement>): void;\n    onInputClick?(): void;\n    onInputError?(err: { code: number; msg: string }): void;\n    onKeyDown?(event: React.KeyboardEvent<HTMLDivElement>): void;\n    onMonthChange?(date: Date): void;\n    onMonthMouseLeave?: (() => void) | undefined;\n    onSelect?(date: Date, event: React.SyntheticEvent<any> | undefined): void;\n    onWeekSelect?(\n        firstDayOfWeek: Date,\n        weekNumber: string | number,\n        event: React.SyntheticEvent<any> | undefined,\n    ): void;\n    onYearChange?(date: Date): void;\n    open?: boolean | undefined;\n    openToDate?: Date | undefined;\n    peekNextMonth?: boolean | undefined;\n    placeholderText?: string | undefined;\n    popperClassName?: string | undefined;\n    popperContainer?(props: { children: React.ReactNode[] }): React.ReactNode;\n    popperModifiers?: ReadonlyArray<Modifier<StrictModifierNames | CustomModifierNames>> | undefined;\n    popperPlacement?: Popper.Placement | undefined;\n    popperProps?: {} | undefined;\n    preventOpenOnFocus?: boolean | undefined;\n    previousMonthButtonLabel?: string | React.ReactNode | undefined;\n    previousYearButtonLabel?: string | undefined;\n    readOnly?: boolean | undefined;\n    renderCustomHeader?(params: {\n        monthDate: Date;\n        date: Date;\n        changeYear(year: number): void;\n        changeMonth(month: number): void;\n        customHeaderCount: number;\n        decreaseMonth(): void;\n        increaseMonth(): void;\n        prevMonthButtonDisabled: boolean;\n        nextMonthButtonDisabled: boolean;\n        decreaseYear(): void;\n        increaseYear(): void;\n        prevYearButtonDisabled: boolean;\n        nextYearButtonDisabled: boolean;\n    }): React.ReactNode;\n    renderDayContents?(dayOfMonth: number, date?: Date): React.ReactNode;\n    required?: boolean | undefined;\n    scrollableMonthYearDropdown?: boolean | undefined;\n    scrollableYearDropdown?: boolean | undefined;\n    selected?: Date | null | undefined;\n    selectsEnd?: boolean | undefined;\n    selectsStart?: boolean | undefined;\n    selectsRange?: boolean | undefined;\n    shouldCloseOnSelect?: boolean | undefined;\n    showDisabledMonthNavigation?: boolean | undefined;\n    showFullMonthYearPicker?: boolean | undefined;\n    showMonthDropdown?: boolean | undefined;\n    showMonthYearDropdown?: boolean | undefined;\n    showMonthYearPicker?: boolean | undefined;\n    showPopperArrow?: boolean | undefined;\n    showPreviousMonths?: boolean | undefined;\n    showQuarterYearPicker?: boolean | undefined;\n    showTimeInput?: boolean | undefined;\n    showTimeSelect?: boolean | undefined;\n    showTimeSelectOnly?: boolean | undefined;\n    showTwoColumnMonthYearPicker?: boolean | undefined;\n    showFourColumnMonthYearPicker?: boolean | undefined;\n    showWeekNumbers?: boolean | undefined;\n    showYearDropdown?: boolean | undefined;\n    showYearPicker?: boolean | undefined;\n    startDate?: Date | null | undefined;\n    startOpen?: boolean | undefined;\n    strictParsing?: boolean | undefined;\n    tabIndex?: number | undefined;\n    timeCaption?: string | undefined;\n    timeFormat?: string | undefined;\n    timeInputLabel?: string | undefined;\n    timeIntervals?: number | undefined;\n    title?: string | undefined;\n    todayButton?: React.ReactNode | undefined;\n    useShortMonthInDropdown?: boolean | undefined;\n    useWeekdaysShort?: boolean | undefined;\n    weekAriaLabelPrefix?: string | undefined;\n    value?: string | undefined;\n    weekLabel?: string | undefined;\n    withPortal?: boolean | undefined;\n    portalId?: string | undefined;\n    wrapperClassName?: string | undefined;\n    yearDropdownItemNumber?: number | undefined;\n    excludeScrollbar?: boolean | undefined;\n    enableTabLoop?: boolean | undefined;\n    yearItemNumber?: number | undefined;\n}\n\nexport class ReactDatePicker<CustomModifierNames extends string = never> extends React.Component<\n    ReactDatePickerProps<CustomModifierNames>\n> {\n    readonly setBlur: () => void;\n    readonly setFocus: () => void;\n    readonly setOpen: (open: boolean, skipSetBlur?: boolean) => void;\n    readonly isCalendarOpen: () => boolean;\n}\n\nexport default ReactDatePicker;\n",
  "e90d61bddfd00fa6db114993d0689cdb367be7e5:types/react-datepicker/index.d.ts": "// Type definitions for react-datepicker 4.1\n// Project: https://github.com/Hacker0x01/react-datepicker\n// Definitions by: Rajab Shakirov <https://github.com/radziksh>,\n//                 Andrey Balokha <https://github.com/andrewBalekha>,\n//                 Greg Smith <https://github.com/smrq>,\n//                 Roy Xue <https://github.com/royxue>\n//                 Koala Human <https://github.com/KoalaHuman>\n//                 Justin Grant <https://github.com/justingrant>\n//                 Jake Boone <https://github.com/jakeboone02>\n//                 Roman Nuritdinov <https://github.com/Ky6uk>\n//                 Avi Klaiman <https://github.com/aviklai>\n//                 Naoki Sekiguchi <https://github.com/seckie>\n//                 tu4mo <https://github.com/tu4mo>\n//                 Kerry Gougeon <https://github.com/kerry-g>\n//                 Shiftr Tech SAS <https://github.com/ShiftrTechSAS>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n// Minimum TypeScript Version: 3.8\n\nimport * as React from 'react';\nimport * as Popper from '@popperjs/core';\nimport { Locale } from 'date-fns';\nimport { Modifier } from 'react-popper';\n\nexport function registerLocale(localeName: string, localeData: Locale): void;\nexport function setDefaultLocale(localeName: string): void;\nexport function getDefaultLocale(): string;\nexport function CalendarContainer(props: {\n    className?: string | undefined;\n    children?: React.ReactNode | undefined;\n    showPopperArrow?: boolean | undefined;\n    arrowProps?: { [propName: string]: any } | undefined;\n}): React.ReactElement;\n\ninterface HighlightDates {\n    [className: string]: Date[];\n}\n\nexport interface ReactDatePickerProps<Modifiers> {\n    adjustDateOnChange?: boolean | undefined;\n    allowSameDay?: boolean | undefined;\n    ariaDescribedBy?: string | undefined;\n    ariaInvalid?: string | undefined;\n    ariaLabelClose?: string | undefined;\n    ariaLabelledBy?: string | undefined;\n    ariaRequired?: string | undefined;\n    autoComplete?: string | undefined;\n    autoFocus?: boolean | undefined;\n    calendarClassName?: string | undefined;\n    calendarContainer?(props: { children: React.ReactNode[] }): React.ReactNode;\n    calendarStartDay?: number | undefined;\n    children?: React.ReactNode | undefined;\n    chooseDayAriaLabelPrefix?: string | undefined;\n    className?: string | undefined;\n    clearButtonClassName?: string | undefined;\n    clearButtonTitle?: string | undefined;\n    closeOnScroll?: boolean | ((e: Event) => boolean) | undefined;\n    customInput?: React.ReactNode | undefined;\n    customInputRef?: string | undefined;\n    customTimeInput?: React.ReactNode | undefined;\n    dateFormat?: string | string[] | undefined;\n    dateFormatCalendar?: string | undefined;\n    dayClassName?(date: Date): string | null;\n    weekDayClassName?(date: Date): string | null;\n    monthClassName?(date: Date): string | null;\n    timeClassName?(date: Date): string | null;\n    disabledDayAriaLabelPrefix?: string | undefined;\n    disabled?: boolean | undefined;\n    disabledKeyboardNavigation?: boolean | undefined;\n    dropdownMode?: 'scroll' | 'select' | undefined;\n    endDate?: Date | null | undefined;\n    excludeDates?: Date[] | undefined;\n    excludeTimes?: Date[] | undefined;\n    filterDate?(date: Date): boolean;\n    filterTime?(date: Date): boolean;\n    fixedHeight?: boolean | undefined;\n    forceShowMonthNavigation?: boolean | undefined;\n    formatWeekDay?(formattedDate: string): React.ReactNode;\n    formatWeekNumber?(date: Date): string | number;\n    highlightDates?: Array<HighlightDates | Date> | undefined;\n    id?: string | undefined;\n    includeDates?: Date[] | undefined;\n    includeTimes?: Date[] | undefined;\n    injectTimes?: Date[] | undefined;\n    inline?: boolean | undefined;\n    focusSelectedMonth?: boolean | undefined;\n    isClearable?: boolean | undefined;\n    locale?: string | Locale | undefined;\n    maxDate?: Date | null | undefined;\n    maxTime?: Date | undefined;\n    minDate?: Date | null | undefined;\n    minTime?: Date | undefined;\n    monthsShown?: number | undefined;\n    name?: string | undefined;\n    nextMonthButtonLabel?: string | React.ReactNode | undefined;\n    nextYearButtonLabel?: string | undefined;\n    onBlur?(event: React.FocusEvent<HTMLInputElement>): void;\n    onCalendarClose?(): void;\n    onCalendarOpen?(): void;\n    onChange(\n        date: Date | [Date | null, Date | null] | /* for selectsRange */ null,\n        event: React.SyntheticEvent<any> | undefined,\n    ): void;\n    onChangeRaw?(event: React.FocusEvent<HTMLInputElement>): void;\n    onClickOutside?(event: React.MouseEvent<HTMLDivElement>): void;\n    onDayMouseEnter?: ((date: Date) => void) | undefined;\n    onFocus?(event: React.FocusEvent<HTMLInputElement>): void;\n    onInputClick?(): void;\n    onInputError?(err: { code: number; msg: string }): void;\n    onKeyDown?(event: React.KeyboardEvent<HTMLDivElement>): void;\n    onMonthChange?(date: Date): void;\n    onMonthMouseLeave?: (() => void) | undefined;\n    onSelect?(date: Date, event: React.SyntheticEvent<any> | undefined): void;\n    onWeekSelect?(\n        firstDayOfWeek: Date,\n        weekNumber: string | number,\n        event: React.SyntheticEvent<any> | undefined,\n    ): void;\n    onYearChange?(date: Date): void;\n    open?: boolean | undefined;\n    openToDate?: Date | undefined;\n    peekNextMonth?: boolean | undefined;\n    placeholderText?: string | undefined;\n    popperClassName?: string | undefined;\n    popperContainer?(props: { children: React.ReactNode[] }): React.ReactNode;\n    popperModifiers?: ReadonlyArray<Modifier<Modifiers>> | undefined;\n    popperPlacement?: Popper.Placement | undefined;\n    popperProps?: {} | undefined;\n    preventOpenOnFocus?: boolean | undefined;\n    previousMonthButtonLabel?: string | React.ReactNode | undefined;\n    previousYearButtonLabel?: string | undefined;\n    readOnly?: boolean | undefined;\n    renderCustomHeader?(params: {\n        monthDate: Date;\n        date: Date;\n        changeYear(year: number): void;\n        changeMonth(month: number): void;\n        customHeaderCount: number;\n        decreaseMonth(): void;\n        increaseMonth(): void;\n        prevMonthButtonDisabled: boolean;\n        nextMonthButtonDisabled: boolean;\n        decreaseYear(): void;\n        increaseYear(): void;\n        prevYearButtonDisabled: boolean;\n        nextYearButtonDisabled: boolean;\n    }): React.ReactNode;\n    renderDayContents?(dayOfMonth: number, date?: Date): React.ReactNode;\n    required?: boolean | undefined;\n    scrollableMonthYearDropdown?: boolean | undefined;\n    scrollableYearDropdown?: boolean | undefined;\n    selected?: Date | null | undefined;\n    selectsEnd?: boolean | undefined;\n    selectsStart?: boolean | undefined;\n    selectsRange?: boolean | undefined;\n    shouldCloseOnSelect?: boolean | undefined;\n    showDisabledMonthNavigation?: boolean | undefined;\n    showFullMonthYearPicker?: boolean | undefined;\n    showMonthDropdown?: boolean | undefined;\n    showMonthYearDropdown?: boolean | undefined;\n    showMonthYearPicker?: boolean | undefined;\n    showPopperArrow?: boolean | undefined;\n    showPreviousMonths?: boolean | undefined;\n    showQuarterYearPicker?: boolean | undefined;\n    showTimeInput?: boolean | undefined;\n    showTimeSelect?: boolean | undefined;\n    showTimeSelectOnly?: boolean | undefined;\n    showTwoColumnMonthYearPicker?: boolean | undefined;\n    showFourColumnMonthYearPicker?: boolean | undefined;\n    showWeekNumbers?: boolean | undefined;\n    showYearDropdown?: boolean | undefined;\n    showYearPicker?: boolean | undefined;\n    startDate?: Date | null | undefined;\n    startOpen?: boolean | undefined;\n    strictParsing?: boolean | undefined;\n    tabIndex?: number | undefined;\n    timeCaption?: string | undefined;\n    timeFormat?: string | undefined;\n    timeInputLabel?: string | undefined;\n    timeIntervals?: number | undefined;\n    title?: string | undefined;\n    todayButton?: React.ReactNode | undefined;\n    useShortMonthInDropdown?: boolean | undefined;\n    useWeekdaysShort?: boolean | undefined;\n    weekAriaLabelPrefix?: string | undefined;\n    value?: string | undefined;\n    weekLabel?: string | undefined;\n    withPortal?: boolean | undefined;\n    portalId?: string | undefined;\n    wrapperClassName?: string | undefined;\n    yearDropdownItemNumber?: number | undefined;\n    excludeScrollbar?: boolean | undefined;\n    enableTabLoop?: boolean | undefined;\n    yearItemNumber?: number | undefined;\n}\n\ndeclare class ReactDatePicker<Modifiers> extends React.Component<ReactDatePickerProps<Modifiers>> {\n    readonly setBlur: () => void;\n    readonly setFocus: () => void;\n    readonly setOpen: (open: boolean, skipSetBlur?: boolean) => void;\n    readonly isCalendarOpen: () => boolean;\n}\n\nexport default ReactDatePicker;\n"
}
